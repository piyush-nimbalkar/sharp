Index: linux-2.6.37.1.x/fs/ext4/ioctl.c
===================================================================
--- linux-2.6.37.1.x.orig/fs/ext4/ioctl.c	2010-11-26 13:46:22.000000000 +0530
+++ linux-2.6.37.1.x/fs/ext4/ioctl.c	2010-11-27 20:20:37.000000000 +0530
@@ -45,6 +45,9 @@
 	switch (cmd) {
 	case EXT4_IOC_GETFLAGS:
 		ext4_get_inode_flags(ei);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		ext4_snapshot_get_flags(ei, filp);
+#endif
 		flags = ei->i_flags & EXT4_FL_USER_VISIBLE;
 		return put_user(flags, (int __user *) arg);
 	case EXT4_IOC_SETFLAGS: {
@@ -53,6 +56,9 @@
 		struct ext4_iloc iloc;
 		unsigned int oldflags;
 		unsigned int jflag;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		unsigned int snapflags = 0;
+#endif
 
 		if (!is_owner_or_cap(inode))
 			return -EACCES;
@@ -72,6 +78,10 @@
 		if (IS_NOQUOTA(inode))
 			goto flags_out;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		/* update snapshot 'open' flag under i_mutex */
+		ext4_snapshot_get_flags(ei, filp);
+#endif
 		oldflags = ei->i_flags;
 
 		/* The JOURNAL_DATA flag is modifiable only by root */
@@ -116,7 +126,37 @@
 			}
 		} else if (oldflags & EXT4_EOFBLOCKS_FL)
 			ext4_truncate(inode);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		/*
+		 * Snapshot file flags can only be changed by
+		 * the relevant capability and under snapshot_mutex lock.
+		 */
+		snapflags = ((flags | oldflags) & EXT4_FL_SNAPSHOT_MASK);
+		if (snapflags) {
+			if (!capable(CAP_SYS_RESOURCE)) {
+				/* indicate snapshot_mutex not taken */
+				snapflags = 0;
+				goto flags_out;
+			}
+
+			/*
+			 * snapshot_mutex should be held throughout the trio
+			 * snapshot_{set_flags,take,update}().  It must be taken
+			 * before starting the transaction, otherwise
+			 * journal_lock_updates() inside snapshot_take()
+			 * can deadlock:
+			 * A: journal_start()
+			 * A: snapshot_mutex_lock()
+			 * B: journal_start()
+			 * B: snapshot_mutex_lock() (waiting for A)
+			 * A: journal_stop()
+			 * A: snapshot_take() ->
+			 * A: 	journal_lock_updates() (waiting for B)
+			 */
+			mutex_lock(&EXT4_SB(inode->i_sb)->s_snapshot_mutex);
+		}
 
+#endif
 		handle = ext4_journal_start(inode, 1);
 		if (IS_ERR(handle)) {
 			err = PTR_ERR(handle);
@@ -130,8 +170,15 @@
 
 		flags = flags & EXT4_FL_USER_MODIFIABLE;
 		flags |= oldflags & ~EXT4_FL_USER_MODIFIABLE;
-		ei->i_flags = flags;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		err = ext4_snapshot_set_flags(handle, inode, flags);
+		if (err)
+			goto flags_err;
+#else
+
+		ei->i_flags = flags;
+#endif
 		ext4_set_inode_flags(inode);
 		inode->i_ctime = ext4_current_time(inode);
 
@@ -145,9 +192,29 @@
 			err = ext4_change_inode_journal_flag(inode, jflag);
 		if (err)
 			goto flags_out;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		if (!(oldflags & EXT4_SNAPFILE_LIST_FL) &&
+				(flags & EXT4_SNAPFILE_LIST_FL))
+			/* setting list flag - take snapshot */
+			err = ext4_snapshot_take(inode);
+#endif
 		if (migrate)
 			err = ext4_ext_migrate(inode);
 flags_out:
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		if (snapflags & EXT4_SNAPFILE_LIST_FL) {
+			/* if clearing list flag, cleanup snapshot list */
+			int ret, cleanup = !(flags & EXT4_SNAPFILE_LIST_FL);
+
+			/* update/cleanup snapshots list even if take failed */
+			ret = ext4_snapshot_update(inode->i_sb, cleanup, 0);
+			if (!err)
+				err = ret;
+		}
+
+		if (snapflags)
+			mutex_unlock(&EXT4_SB(inode->i_sb)->s_snapshot_mutex);
+#endif
 		mutex_unlock(&inode->i_mutex);
 		mnt_drop_write(filp->f_path.mnt);
 		return err;
@@ -227,7 +294,10 @@
 		err = mnt_want_write(filp->f_path.mnt);
 		if (err)
 			return err;
-
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		/* avoid snapshot_take() in the middle of group_add() */
+		mutex_lock(&EXT4_SB(sb)->s_snapshot_mutex);
+#endif
 		err = ext4_group_extend(sb, EXT4_SB(sb)->s_es, n_blocks_count);
 		if (EXT4_SB(sb)->s_journal) {
 			jbd2_journal_lock_updates(EXT4_SB(sb)->s_journal);
@@ -236,6 +306,9 @@
 		}
 		if (err == 0)
 			err = err2;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+		mutex_unlock(&EXT4_SB(sb)->s_snapshot_mutex);
+#endif
 		mnt_drop_write(filp->f_path.mnt);
 
 		return err;
Index: linux-2.6.37.1.x/fs/ext4/Kconfig
===================================================================
--- linux-2.6.37.1.x.orig/fs/ext4/Kconfig	2010-11-27 19:42:15.000000000 +0530
+++ linux-2.6.37.1.x/fs/ext4/Kconfig	2010-11-27 20:17:03.000000000 +0530
@@ -205,6 +205,15 @@
 	  Implementation of copying blocks into a snapshot file.
 	  This mechanism is used to copy-on-write metadata blocks to snapshot.
 
+config EXT4_FS_SNAPSHOT_CTL
+	bool "snapshot control"
+	depends on EXT4_FS_SNAPSHOT_FILE
+	default y
+	help
+	  Snapshot control with chattr -X.
+	  Take/delete snapshot with chattr -X +/-S.
+	  Enable/disable snapshot with chattr -X +/-
+
 config EXT4_FS_SNAPSHOT_BLOCK_MOVE
 	bool "snapshot block operation - move blocks to snapshot"
 	depends on EXT4_FS_SNAPSHOT_BLOCK
Index: linux-2.6.37.1.x/fs/ext4/snapshot_ctl.c
===================================================================
--- linux-2.6.37.1.x.orig/fs/ext4/snapshot_ctl.c	2010-11-27 19:42:15.000000000 +0530
+++ linux-2.6.37.1.x/fs/ext4/snapshot_ctl.c	2010-11-27 20:19:09.000000000 +0530
@@ -116,6 +116,369 @@
 #define ext4_snapshot_reset_bitmap_cache(sb, init) 0
 #endif
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+/*
+ * Snapshot control functions
+ *
+ * Snapshot files are controlled by changing snapshot flags with chattr and
+ * moving the snapshot file through the stages of its life cycle:
+ *
+ * 1. Creating a snapshot file
+ * The snapfile flag is changed for directories only (chattr +x), so
+ * snapshot files must be created inside a snapshots directory.
+ * They inherit the flag at birth and they die with it.
+ * This helps to avoid various race conditions when changing
+ * regular files to snapshots and back.
+ * Snapshot files are assigned with read-only address space operations, so
+ * they are not writable for users.
+ *
+ * 2. Taking a snapshot
+ * An empty snapshot file becomes the active snapshot after it is added to the
+ * head on the snapshots list by setting its snapshot list flag (chattr -X +S).
+ * snapshot_create() verifies that the file is empty and pre-allocates some
+ * blocks during the ioctl transaction.  snapshot_take() locks journal updates
+ * and copies some file system block to the pre-allocated blocks and then adds
+ * the snapshot file to the on-disk list and sets it as the active snapshot.
+ *
+ * 3. Mounting a snapshot
+ * A snapshot on the list can be enabled for user read access by setting the
+ * enabled flag (chattr -X +n) and disabled by clearing the enabled flag.
+ * An enabled snapshot can be mounted via a loop device and mounted as a
+ * read-only ext2 filesystem.
+ *
+ * 4. Deleting a snapshot
+ * A non-mounted and disabled snapshot may be marked for removal from the
+ * snapshots list by requesting to clear its snapshot list flag (chattr -X -S).
+ * The process of removing a snapshot from the list varies according to the
+ * dependencies between the snapshot and older snapshots on the list:
+ * - if all older snapshots are deleted, the snapshot is removed from the list.
+ * - if some older snapshots are enabled, snapshot_shrink() is called to free
+ *   unused blocks, but the snapshot remains on the list.
+ * - if all older snapshots are disabled, snapshot_merge() is called to move
+ *   used blocks to an older snapshot and the snapshot is removed from the list.
+ *
+ * 5. Unlinking a snapshot file
+ * When a snapshot file is no longer (or never was) on the snapshots list, it
+ * may be unlinked.  Snapshots on the list are protected from user unlink and
+ * truncate operations.
+ *
+ * 6. Discarding all snapshots
+ * An irregular way to abruptly end the lives of all snapshots on the list is by
+ * detaching the snapshot list head using the command: tune2fs -O ^has_snapshot.
+ * This action is applicable on an un-mounted ext4 filesystem.  After mounting
+ * the filesystem, the discarded snapshot files will not be loaded, they will
+ * not have the snapshot list flag and therefore, may be unlinked.
+ */
+static int ext4_snapshot_enable(struct inode *inode);
+static int ext4_snapshot_disable(struct inode *inode);
+static int ext4_snapshot_create(struct inode *inode);
+static int ext4_snapshot_delete(struct inode *inode);
+
+/*
+ * ext4_snapshot_get_flags() check snapshot state
+ * Called from ext4_ioctl() under i_mutex
+ */
+void ext4_snapshot_get_flags(struct ext4_inode_info *ei, struct file *filp)
+{
+	int open_count = atomic_read(&filp->f_path.dentry->d_count);
+	/*
+	 * 1 count for ioctl (lsattr)
+	 * greater count means the snapshot is open by user (mounted?)
+	 */
+	if ((ei->i_flags & EXT4_SNAPFILE_LIST_FL) && open_count > 1)
+		ei->i_flags |= EXT4_SNAPFILE_OPEN_FL;
+	else
+		ei->i_flags &= ~EXT4_SNAPFILE_OPEN_FL;
+}
+
+/*
+ * ext4_snapshot_set_flags() monitors snapshot state changes
+ * Called from ext4_ioctl() under i_mutex and snapshot_mutex
+ */
+int ext4_snapshot_set_flags(handle_t *handle, struct inode *inode,
+			     unsigned int flags)
+{
+	unsigned int oldflags = EXT4_I(inode)->i_flags;
+	int err = 0;
+
+	if (S_ISDIR(inode->i_mode)) {
+		/* only the snapfile flag may be set for directories */
+		EXT4_I(inode)->i_flags &= ~EXT4_SNAPFILE_FL;
+		EXT4_I(inode)->i_flags |= flags & EXT4_SNAPFILE_FL;
+		goto non_snapshot;
+	}
+
+	if (!ext4_snapshot_file(inode)) {
+		if ((flags ^ oldflags) & EXT4_FL_SNAPSHOT_MASK) {
+			/* snapflags can only be changed for snapfiles */
+			snapshot_debug(1, "changing snapflags for non snapfile"
+					" (ino=%lu) is not allowed\n",
+					inode->i_ino);
+			return -EINVAL;
+		}
+		goto non_snapshot;
+	}
+
+
+
+	if ((flags ^ oldflags) & EXT4_SNAPFILE_ENABLED_FL) {
+		/* enabled/disabled the snapshot during transaction */
+		if (flags & EXT4_SNAPFILE_ENABLED_FL)
+			err = ext4_snapshot_enable(inode);
+		else
+			err = ext4_snapshot_disable(inode);
+	}
+	if (err)
+		goto out;
+
+	if ((flags ^ oldflags) & EXT4_SNAPFILE_LIST_FL) {
+		/* add/delete to snapshots list during transaction */
+		if (flags & EXT4_SNAPFILE_LIST_FL)
+			err = ext4_snapshot_create(inode);
+		else
+			err = ext4_snapshot_delete(inode);
+	}
+	if (err)
+		goto out;
+
+	/* set snapshot user flags */
+	EXT4_I(inode)->i_flags &= ~EXT4_FL_SNAPSHOT_USER_MASK;
+	EXT4_I(inode)->i_flags |= flags & EXT4_FL_SNAPSHOT_USER_MASK;
+non_snapshot:
+	/* set only non-snapshot flags here */
+	flags &= ~EXT4_FL_SNAPSHOT_MASK;
+	flags |= (EXT4_I(inode)->i_flags & EXT4_FL_SNAPSHOT_MASK);
+	EXT4_I(inode)->i_flags = flags;
+
+out:
+	/*
+	 * retake reserve inode write from ext4_ioctl() and mark inode
+	 * dirty
+	 */
+	if (!err)
+		err = ext4_mark_inode_dirty(handle, inode);
+	return err;
+}
+
+/*
+ * If we have fewer than nblocks credits,
+ * extend transaction by a minimum of EXT4_MAX_TRANS_DATA.
+ * If that fails, restart the transaction &
+ * regain write access for the inode block.
+ */
+static int __extend_or_restart_transaction(const char *where,
+		handle_t *handle, struct inode *inode, int nblocks)
+{
+	int err;
+
+	if (EXT4_SNAPSHOT_HAS_TRANS_BLOCKS(handle, nblocks))
+		return 0;
+
+	if (nblocks < EXT4_MAX_TRANS_DATA)
+		nblocks = EXT4_MAX_TRANS_DATA;
+
+	err = __ext4_journal_extend(where,
+			(ext4_handle_t *)handle, nblocks);
+	if (err < 0)
+		return err;
+	if (err) {
+		if (inode) {
+			/* lazy way to do mark_iloc_dirty() */
+			err = ext4_mark_inode_dirty(handle, inode);
+			if (err)
+				return err;
+		}
+		err = __ext4_journal_restart(where,
+				(ext4_handle_t *)handle, nblocks);
+		if (err)
+			return err;
+		if (inode)
+			/* lazy way to do reserve_inode_write() */
+			err = ext4_mark_inode_dirty(handle, inode);
+	}
+
+	return err;
+}
+
+#define extend_or_restart_transaction(handle, nblocks)			\
+	__extend_or_restart_transaction(__func__, (handle), NULL, (nblocks))
+#define extend_or_restart_transaction_inode(handle, inode, nblocks)	\
+	__extend_or_restart_transaction(__func__, (handle), (inode), (nblocks))
+
+
+/*
+ * ext4_snapshot_create() initializes a snapshot file
+ * and adds it to the list of snapshots
+ * Called under i_mutex and snapshot_mutex
+ */
+static int ext4_snapshot_create(struct inode *inode)
+{
+	handle_t *handle;
+	struct super_block *sb = inode->i_sb;
+	struct ext4_sb_info *sbi = EXT4_SB(sb);
+	struct inode *active_snapshot = ext4_snapshot_has_active(sb);
+	struct ext4_inode_info *ei = EXT4_I(inode);
+	int i, err, ret;
+	ext4_fsblk_t snapshot_blocks = le32_to_cpu(sbi->s_es->s_blocks_count);
+	if (active_snapshot) {
+		snapshot_debug(1, "failed to add snapshot because active "
+			       "snapshot (%u) has to be deleted first\n",
+			       active_snapshot->i_generation);
+		return -EINVAL;
+	}
+
+	/* prevent take of unlinked snapshot file */
+	if (!inode->i_nlink) {
+		snapshot_debug(1, "failed to create snapshot file (ino=%lu) "
+				"because it has 0 nlink count\n",
+				inode->i_ino);
+		return -EINVAL;
+	}
+
+	/* prevent recycling of old snapshot files */
+	if ((ei->i_flags & EXT4_FL_SNAPSHOT_MASK) != EXT4_SNAPFILE_FL) {
+		snapshot_debug(1, "failed to create snapshot file (ino=%lu) "
+				"because it has snapshot flags (0x%x)\n",
+				inode->i_ino,
+				inode->i_flags & EXT4_FL_SNAPSHOT_MASK);
+		return -EINVAL;
+	}
+
+	/* verify that no inode blocks are allocated */
+	for (i = 0; i < EXT4_N_BLOCKS; i++) {
+		if (ei->i_data[i])
+			break;
+	}
+	/* Don't need i_size_read because we hold i_mutex */
+	if (i != EXT4_N_BLOCKS ||
+		inode->i_size > 0 || ei->i_disksize > 0) {
+		snapshot_debug(1, "failed to create snapshot file (ino=%lu) "
+				"because it is not empty (i_data[%d]=%u, "
+				"i_size=%lld, i_disksize=%lld)\n",
+				inode->i_ino, i, ei->i_data[i],
+				inode->i_size, ei->i_disksize);
+		return -EINVAL;
+	}
+
+	/*
+	 * Take a reference to the small transaction that started in
+	 * ext4_ioctl() We will extend or restart this transaction as we go
+	 * along.  journal_start(n > 1) would not have increase the buffer
+	 * credits.
+	 */
+	handle = ext4_journal_start(inode, 1);
+
+	err = extend_or_restart_transaction_inode(handle, inode, 2);
+	if (err)
+		goto out_handle;
+
+	/* record the new snapshot ID in the snapshot inode generation field */
+	inode->i_generation = le32_to_cpu(sbi->s_es->s_snapshot_id) + 1;
+	if (inode->i_generation == 0)
+		/* 0 is not a valid snapshot id */
+		inode->i_generation = 1;
+
+	/* record the file system size in the snapshot inode disksize field */
+	SNAPSHOT_SET_BLOCKS(inode, snapshot_blocks);
+	SNAPSHOT_SET_DISABLED(inode);
+
+	if (!EXT4_HAS_RO_COMPAT_FEATURE(sb,
+		EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT))
+		/* set the 'has_snapshot' feature */
+		EXT4_SET_RO_COMPAT_FEATURE(sb,
+			EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT);
+
+	lock_super(sb);
+	err = ext4_journal_get_write_access(handle, sbi->s_sbh);
+	sbi->s_es->s_snapshot_list = cpu_to_le32(inode->i_ino);
+	if (!err)
+		err = ext4_journal_dirty_metadata(handle, sbi->s_sbh);
+	unlock_super(sb);
+	if (err)
+		goto out_handle;
+
+	err = ext4_mark_inode_dirty(handle, inode);
+	if (err)
+		goto out_handle;
+
+
+	snapshot_debug(1, "snapshot (%u) created\n", inode->i_generation);
+	err = 0;
+out_handle:
+	ret = ext4_journal_stop(handle);
+	if (!err)
+		err = ret;
+	return err;
+}
+
+/*
+ * If we call ext4_getblk() with NULL handle we will get read through access
+ * to snapshot inode.  We don't want read through access in snapshot_take(),
+ * so we call ext4_getblk() with this dummy handle and since we are not
+ * allocating snapshot block here the handle will not be used anyway.
+ */
+static handle_t dummy_handle;
+
+
+/*
+ * ext4_snapshot_take() makes a new snapshot file
+ * into the active snapshot
+ *
+ * this function calls journal_lock_updates()
+ * and should not be called during a journal transaction
+ * Called from ext4_ioctl() under i_mutex and snapshot_mutex
+ */
+int ext4_snapshot_take(struct inode *inode)
+{
+	struct super_block *sb = inode->i_sb;
+	struct ext4_sb_info *sbi = EXT4_SB(sb);
+	struct ext4_super_block *es = NULL;
+	struct buffer_head *sbh = NULL;
+	int err = -EIO;
+
+	if (!sbi->s_sbh)
+		goto out_err;
+	else if (sbi->s_sbh->b_blocknr != 0) {
+		snapshot_debug(1, "warning: unexpected super block at block "
+			"(%lld:%d)!\n", (long long)sbi->s_sbh->b_blocknr,
+			(int)((char *)sbi->s_es - (char *)sbi->s_sbh->b_data));
+	} else if (sbi->s_es->s_magic != cpu_to_le16(EXT4_SUPER_MAGIC)) {
+		snapshot_debug(1, "warning: super block of snapshot (%u) is "
+			       "broken!\n", inode->i_generation);
+	} else
+		sbh = ext4_getblk(&dummy_handle, inode, SNAPSHOT_IBLOCK(0),
+				   SNAPMAP_READ, &err);
+
+	if (!sbh || sbh->b_blocknr == 0) {
+		snapshot_debug(1, "warning: super block of snapshot (%u) not "
+			       "allocated\n", inode->i_generation);
+		goto out_err;
+	} else {
+		snapshot_debug(4, "super block of snapshot (%u) mapped to "
+			       "block (%lld)\n", inode->i_generation,
+			       (long long)sbh->b_blocknr);
+		es = (struct ext4_super_block *)(sbh->b_data +
+						  ((char *)sbi->s_es -
+						   sbi->s_sbh->b_data));
+	}
+
+	err = -EIO;
+
+	/*
+	 * flush journal to disk and clear the RECOVER flag
+	 * before taking the snapshot
+	 */
+	sb->s_op->freeze_fs(sb);
+	lock_super(sb);
+
+#ifdef CONFIG_EXT4_FS_DEBUG
+	if (snapshot_enable_test[SNAPTEST_TAKE]) {
+		snapshot_debug(1, "taking snapshot (%u) ...\n",
+				inode->i_generation);
+		/* sleep 1 tunable delay unit */
+		snapshot_test_delay(SNAPTEST_TAKE);
+	}
+#endif
 
 /*
  * Snapshot constructor/destructor
@@ -146,6 +509,233 @@
 	int has_active = 0;
 
 
+
+	/* reset COW bitmap cache */
+	err = ext4_snapshot_reset_bitmap_cache(sb, 0);
+	if (err)
+		goto out_unlockfs;
+	/* set as in-memory active snapshot */
+	err = ext4_snapshot_set_active(sb, inode);
+	if (err)
+		goto out_unlockfs;
+
+	/* set as on-disk active snapshot */
+	sbi->s_es->s_snapshot_id =
+		cpu_to_le32(le32_to_cpu(sbi->s_es->s_snapshot_id)+1);
+	if (sbi->s_es->s_snapshot_id == 0)
+		/* 0 is not a valid snapshot id */
+		sbi->s_es->s_snapshot_id = cpu_to_le32(1);
+	sbi->s_es->s_snapshot_inum = cpu_to_le32(inode->i_ino);
+
+	err = 0;
+out_unlockfs:
+	unlock_super(sb);
+	sb->s_op->unfreeze_fs(sb);
+
+	if (err)
+		goto out_err;
+
+	snapshot_debug(1, "snapshot (%u) has been taken\n",
+			inode->i_generation);
+
+out_err:
+	brelse(sbh);
+	return err;
+}
+
+
+/*
+ * ext4_snapshot_enable() enables snapshot mount
+ * sets the in-use flag and the active snapshot
+ * Called under i_mutex and snapshot_mutex
+ */
+static int ext4_snapshot_enable(struct inode *inode)
+{
+	struct ext4_inode_info *ei = EXT4_I(inode);
+
+	if (!ext4_snapshot_list(inode)) {
+		snapshot_debug(1, "ext4_snapshot_enable() called with "
+			       "snapshot file (ino=%lu) not on list\n",
+			       inode->i_ino);
+		return -EINVAL;
+	}
+
+	if (ei->i_flags & EXT4_SNAPFILE_DELETED_FL) {
+		snapshot_debug(1, "enable of deleted snapshot (%u) "
+				"is not permitted\n",
+				inode->i_generation);
+		return -EPERM;
+	}
+
+	/*
+	 * set i_size to block device size to enable loop device mount
+	 */
+	SNAPSHOT_SET_ENABLED(inode);
+	ei->i_flags |= EXT4_SNAPFILE_ENABLED_FL;
+
+	/* Don't need i_size_read because we hold i_mutex */
+	snapshot_debug(4, "setting snapshot (%u) i_size to (%lld)\n",
+			inode->i_generation, inode->i_size);
+	snapshot_debug(1, "snapshot (%u) enabled\n", inode->i_generation);
+	return 0;
+}
+
+/*
+ * ext4_snapshot_disable() disables snapshot mount
+ * Called under i_mutex and snapshot_mutex
+ */
+static int ext4_snapshot_disable(struct inode *inode)
+{
+	struct ext4_inode_info *ei = EXT4_I(inode);
+
+	if (!ext4_snapshot_list(inode)) {
+		snapshot_debug(1, "ext4_snapshot_disable() called with "
+			       "snapshot file (ino=%lu) not on list\n",
+			       inode->i_ino);
+		return -EINVAL;
+	}
+
+	if (ei->i_flags & EXT4_SNAPFILE_OPEN_FL) {
+		snapshot_debug(1, "disable of mounted snapshot (%u) "
+				"is not permitted\n",
+				inode->i_generation);
+		return -EPERM;
+	}
+
+	/*
+	 * set i_size to zero to disable loop device mount
+	 */
+	SNAPSHOT_SET_DISABLED(inode);
+	ei->i_flags &= ~EXT4_SNAPFILE_ENABLED_FL;
+
+	/* invalidate page cache */
+	truncate_inode_pages(&inode->i_data, SNAPSHOT_BYTES_OFFSET);
+
+	/* Don't need i_size_read because we hold i_mutex */
+	snapshot_debug(4, "setting snapshot (%u) i_size to (%lld)\n",
+			inode->i_generation, inode->i_size);
+	snapshot_debug(1, "snapshot (%u) disabled\n", inode->i_generation);
+	return 0;
+}
+
+/*
+ * ext4_snapshot_delete() marks snapshot for deletion
+ * Called under i_mutex and snapshot_mutex
+ */
+static int ext4_snapshot_delete(struct inode *inode)
+{
+	struct ext4_inode_info *ei = EXT4_I(inode);
+
+	if (!ext4_snapshot_list(inode)) {
+		snapshot_debug(1, "ext4_snapshot_delete() called with "
+			       "snapshot file (ino=%lu) not on list\n",
+			       inode->i_ino);
+		return -EINVAL;
+	}
+
+	if (ei->i_flags & EXT4_SNAPFILE_ENABLED_FL) {
+		snapshot_debug(1, "delete of enabled snapshot (%u) "
+				"is not permitted\n",
+				inode->i_generation);
+		return -EPERM;
+	}
+
+	/* mark deleted for later cleanup to finish the job */
+	ei->i_flags |= EXT4_SNAPFILE_DELETED_FL;
+	snapshot_debug(1, "snapshot (%u) marked for deletion\n",
+			inode->i_generation);
+	return 0;
+}
+
+/*
+ * ext4_snapshot_remove - removes a snapshot from the list
+ * @inode: snapshot inode
+ *
+ * Removed the snapshot inode from in-memory and on-disk snapshots list of
+ * and truncates the snapshot inode.
+ * Called from ext4_snapshot_update/cleanup/merge() under snapshot_mutex.
+ * Returns 0 on success and <0 on error.
+ */
+static int ext4_snapshot_remove(struct inode *inode)
+{
+	handle_t *handle;
+	struct ext4_sb_info *sbi;
+	struct ext4_inode_info *ei = EXT4_I(inode);
+	int err = 0, ret;
+
+	/* elevate ref count until final cleanup */
+	if (!igrab(inode))
+		return -EIO;
+
+	if (ei->i_flags & (EXT4_SNAPFILE_ENABLED_FL | EXT4_SNAPFILE_INUSE_FL
+			   | EXT4_SNAPFILE_ACTIVE_FL)) {
+		snapshot_debug(4, "deferred delete of %s snapshot (%u)\n",
+				(ei->i_flags & EXT4_SNAPFILE_ACTIVE_FL) ?
+				"active" :
+				((ei->i_flags & EXT4_SNAPFILE_ENABLED_FL) ?
+				"enabled" : "referenced"),
+			       inode->i_generation);
+		goto out_err;
+	}
+
+	/* start large truncate transaction that will be extended/restarted */
+	handle = ext4_journal_start(inode, EXT4_MAX_TRANS_DATA);
+	if (IS_ERR(handle)) {
+		err = PTR_ERR(handle);
+		goto out_err;
+	}
+	sbi = EXT4_SB(inode->i_sb);
+
+
+	err = extend_or_restart_transaction_inode(handle, inode, 2);
+	if (err)
+		goto out_handle;
+
+	lock_super(inode->i_sb);
+	err = ext4_journal_get_write_access(handle, sbi->s_sbh);
+	sbi->s_es->s_snapshot_list = 0;
+	if (!err)
+		err = ext4_journal_dirty_metadata(handle, sbi->s_sbh);
+	unlock_super(inode->i_sb);
+	if (err)
+		goto out_handle;
+	/*
+	 * At this point, this snapshot is empty and not on the snapshots list.
+	 * As long as it was on the list it had to have the LIST flag to prevent
+	 * truncate/unlink.  Now that it is removed from the list, the LIST flag
+	 * and other snapshot status flags should be cleared.  It will still
+	 * have the SNAPFILE and DELETED flag to indicate this is a deleted
+	 * snapshot that should not be recycled.  There is no need to mark the
+	 * inode dirty, because the 'dynamic' status flags are not persistent.
+	 */
+	ei->i_flags &= ~EXT4_FL_SNAPSHOT_DYN_MASK;
+
+out_handle:
+	ret = ext4_journal_stop(handle);
+	if (!err)
+		err = ret;
+	if (err)
+		goto out_err;
+
+	/* sleep 1 tunable delay unit */
+	snapshot_test_delay(SNAPTEST_DELETE);
+	snapshot_debug(1, "snapshot (%u) deleted\n", inode->i_generation);
+
+	err = 0;
+out_err:
+	/* drop final ref count - taken on entry to this function */
+	iput(inode);
+	if (err) {
+		snapshot_debug(1, "failed to delete snapshot (%u)\n",
+				inode->i_generation);
+	}
+	return err;
+}
+
+
+
+#endif
+
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE_OLD
 	/* Migrate super block on-disk format */
 	if (EXT4_HAS_RO_COMPAT_FEATURE(sb,
@@ -311,6 +901,10 @@
 int ext4_snapshot_update(struct super_block *sb, int cleanup, int read_only)
 {
 	struct inode *active_snapshot = ext4_snapshot_has_active(sb);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+	struct inode *used_by = NULL; /* last non-deleted snapshot found */
+	int deleted;
+#endif
 	int err = 0;
 
 	BUG_ON(read_only && cleanup);
@@ -319,6 +913,28 @@
 			EXT4_SNAPFILE_ACTIVE_FL|EXT4_SNAPFILE_LIST_FL;
 
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+	if (!active_snapshot || !cleanup || used_by)
+		return 0;
+
+	/* if all snapshots are deleted - deactivate active snapshot */
+	deleted = EXT4_I(active_snapshot)->i_flags & EXT4_SNAPFILE_DELETED_FL;
+	if (deleted && igrab(active_snapshot)) {
+		/* lock journal updates before deactivating snapshot */
+		sb->s_op->freeze_fs(sb);
+		lock_super(sb);
+		/* deactivate in-memory active snapshot - cannot fail */
+		(void) ext4_snapshot_set_active(sb, NULL);
+		/* clear on-disk active snapshot */
+		EXT4_SB(sb)->s_es->s_snapshot_inum = 0;
+		unlock_super(sb);
+		sb->s_op->unfreeze_fs(sb);
+		/* remove unused deleted active snapshot */
+		err = ext4_snapshot_remove(active_snapshot);
+		/* drop the refcount to 0 */
+		iput(active_snapshot);
+	}
+#endif
 	return err;
 }
 #else
Index: linux-2.6.37.1.x/fs/ext4/snapshot.h
===================================================================
--- linux-2.6.37.1.x.orig/fs/ext4/snapshot.h	2010-11-27 19:42:15.000000000 +0530
+++ linux-2.6.37.1.x/fs/ext4/snapshot.h	2010-11-27 20:17:03.000000000 +0530
@@ -105,6 +105,17 @@
 BUFFER_FNS(Partial_Write, partial_write)
 #endif
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
+/*
+ * Snapshot control functions
+ */
+extern void ext4_snapshot_get_flags(struct ext4_inode_info *ei,
+				     struct file *filp);
+extern int ext4_snapshot_set_flags(handle_t *handle, struct inode *inode,
+				    unsigned int flags);
+extern int ext4_snapshot_take(struct inode *inode);
+
+#endif
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK
 /*

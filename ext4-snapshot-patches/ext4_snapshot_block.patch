Index: linux_dir/fs/ext4/inode.c
===================================================================
--- linux_dir.orig/fs/ext4/inode.c	2010-11-24 15:46:00.000000000 +0530
+++ linux_dir/fs/ext4/inode.c	2010-11-24 16:02:44.000000000 +0530
@@ -964,6 +964,14 @@
  * down_read(&EXT4_I(inode)->i_data_sem) if not allocating file system
  * blocks.
  */
++#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK
+/*
+ * snapshot_map_blocks() command flags are passed to get_blocks_handle() on its
+ * @create argument.  All places in original code call get_blocks_handle()
+ * with @create 0 or 1.  The behavior of the function remains the same for
+ * these 2 values, while higher bits are used for mapping snapshot blocks.
+ */
+#endif
 static int ext4_ind_map_blocks(handle_t *handle, struct inode *inode,
 			       struct ext4_map_blocks *map,
 			       int flags)
Index: linux_dir/fs/ext4/Kconfig
===================================================================
--- linux_dir.orig/fs/ext4/Kconfig	2010-11-24 15:48:31.000000000 +0530
+++ linux_dir/fs/ext4/Kconfig	2010-11-24 15:56:43.000000000 +0530
@@ -184,3 +184,15 @@
 	  Snapshot flags and super block field positions have changed.
 	  When old has_snapshot flag is set, copy fields to new position,
 	  clear old flags and fields and set new flags on mount time.
+
+config EXT4_FS_SNAPSHOT_BLOCK
+	bool "snapshot block operations"
+	depends on EXT4_FS_SNAPSHOT_FILE
+	default y
+	help
+	  Core implementation of special snapshot file block operations.
+	  The argument @create to the function ext4_get_blocks_handle()
+	  is re-interpreted as a snapshot block command argument.  The old
+	  argument values 0(=read) and 1(=create) preserve the original
+	  behavior of the function.  The bit field h_cowing in the current
+	  transaction handle is used to prevent COW recursions.
Index: linux_dir/fs/ext4/snapshot.c
===================================================================
--- linux_dir.orig/fs/ext4/snapshot.c	2010-11-24 15:41:17.000000000 +0530
+++ linux_dir/fs/ext4/snapshot.c	2010-11-24 15:56:43.000000000 +0530
@@ -14,6 +14,49 @@
 
 #include "snapshot.h"
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK
+#define snapshot_debug_hl(n, f, a...)	snapshot_debug_l(n, handle ? 	\
+						 IS_COWING(handle) : 0, f, ## a)
+
+/*
+ * ext4_snapshot_map_blocks() - helper function for
+ * ext4_snapshot_test_and_cow().  Test if blocks are mapped in snapshot file.
+ * If @block is not mapped and if @cmd is non zero, try to allocate @maxblocks.
+ * Also used by ext4_snapshot_create() to pre-allocate snapshot blocks.
+ *
+ * Return values:
+ * > 0 - no. of mapped blocks in snapshot file
+ * = 0 - @block is not mapped in snapshot file
+ * < 0 - error
+ */
+int ext4_snapshot_map_blocks(handle_t *handle, struct inode *inode,
+			      ext4_snapblk_t block, unsigned long maxblocks,
+			      ext4_fsblk_t *mapped, int cmd)
+{
+	struct buffer_head dummy;
+	int err;
+
+	dummy.b_state = 0;
+	dummy.b_blocknr = 0;
+	err = ext4_get_blocks_handle(handle, inode, SNAPSHOT_IBLOCK(block),
+				      maxblocks, &dummy, cmd);
+	/*
+	 * ext4_get_blocks_handle() returns number of blocks
+	 * mapped. 0 in case of a HOLE.
+	 */
+	if (mapped && err > 0)
+		*mapped = dummy.b_blocknr;
+
+	snapshot_debug_hl(4, "snapshot (%u) map_blocks "
+			"[%lu/%lu] = [%lu/%lu] "
+			"cmd=%d, maxblocks=%lu, mapped=%d\n",
+			inode->i_generation,
+			SNAPSHOT_BLOCK_TUPLE(block),
+			SNAPSHOT_BLOCK_TUPLE(dummy.b_blocknr),
+			cmd, maxblocks, err);
+	return err;
+}
+#endif
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE_READ
 /*
@@ -31,6 +74,29 @@
 {
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	unsigned int flags = ei->i_flags;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK
+#ifdef CONFIG_EXT4_FS_DEBUG
+	ext4_fsblk_t block = SNAPSHOT_BLOCK(iblock);
+	unsigned long block_group = (iblock < SNAPSHOT_BLOCK_OFFSET ? -1 :
+			SNAPSHOT_BLOCK_GROUP(block));
+	ext4_grpblk_t blk = (iblock < SNAPSHOT_BLOCK_OFFSET ? iblock :
+			SNAPSHOT_BLOCK_GROUP_OFFSET(block));
+	snapshot_debug_hl(4, "snapshot (%u) get_blocks [%d/%lu] count=%d "
+			  "cmd=%d\n", inode->i_generation, blk, block_group,
+			  count, cmd);
+#endif
+
+	if (SNAPMAP_ISSPECIAL(cmd)) {
+		/*
+		 * COWing or moving blocks to active snapshot
+		 */
+		BUG_ON(!handle || !IS_COWING(handle));
+		BUG_ON(!(flags & EXT4_SNAPFILE_ACTIVE_FL));
+		BUG_ON(iblock < SNAPSHOT_BLOCK_OFFSET);
+		return 0;
+	} else if (cmd)
+		BUG_ON(handle && IS_COWING(handle));
+#endif
 
 	if (!(flags & EXT4_SNAPFILE_LIST_FL)) {
 		return 0;
Index: linux_dir/fs/ext4/snapshot.h
===================================================================
--- linux_dir.orig/fs/ext4/snapshot.h	2010-11-24 15:41:17.000000000 +0530
+++ linux_dir/fs/ext4/snapshot.h	2010-11-24 15:56:43.000000000 +0530
@@ -106,6 +106,50 @@
 #endif
 
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK
+/*
+ * snapshot_map_blocks() command flags passed to get_blocks_handle() on its
+ * @create argument.  All places in original code call get_blocks_handle()
+ * with @create 0 or 1.  The behavior of the function remains the same for
+ * these 2 values, while higher bits are used for mapping snapshot blocks.
+ */
+/* original meaning - only check if blocks are mapped */
+#define SNAPMAP_READ	0
+/* original meaning - allocate missing blocks and indirect blocks */
+#define SNAPMAP_WRITE	0x1
+/* creating COWed block - handle COW race conditions */
+#define SNAPMAP_COW	0x2
+/* moving blocks to snapshot - allocate only indirect blocks */
+#define SNAPMAP_MOVE	0x4
+/* bypass journal and sync allocated indirect blocks directly to disk */
+#define SNAPMAP_SYNC	0x8
+/* creating COW bitmap - handle COW races and bypass journal */
+#define SNAPMAP_BITMAP	(SNAPMAP_COW|SNAPMAP_SYNC)
+
+/* original @create flag test - only check map or create map? */
+#define SNAPMAP_ISREAD(cmd)	((cmd) == SNAPMAP_READ)
+#define SNAPMAP_ISWRITE(cmd)	((cmd) == SNAPMAP_WRITE)
+#define SNAPMAP_ISCREATE(cmd)	((cmd) != SNAPMAP_READ)
+/* test special cases when mapping snapshot blocks */
+#define SNAPMAP_ISSPECIAL(cmd)	((cmd) & ~SNAPMAP_WRITE)
+#define SNAPMAP_ISCOW(cmd)	((cmd) & SNAPMAP_COW)
+#define SNAPMAP_ISMOVE(cmd)	((cmd) & SNAPMAP_MOVE)
+#define SNAPMAP_ISSYNC(cmd)	((cmd) & SNAPMAP_SYNC)
+
+/* helper functions for ext4_snapshot_create() */
+extern int ext4_snapshot_map_blocks(handle_t *handle, struct inode *inode,
+				     ext4_snapblk_t block,
+				     unsigned long maxblocks,
+				     ext4_fsblk_t *mapped, int cmd);
+/* helper function for ext4_snapshot_take() */
+extern void ext4_snapshot_copy_buffer(struct buffer_head *sbh,
+					   struct buffer_head *bh,
+					   const char *mask);
+/* helper function for ext4_snapshot_get_block() */
+extern int ext4_snapshot_read_block_bitmap(struct super_block *sb,
+		unsigned int block_group, struct buffer_head *bitmap_bh);
+
+#endif
 #define ext4_snapshot_cow(handle, inode, bh, cow) 0
 
 #define ext4_snapshot_move(handle, inode, block, num, move) (num)

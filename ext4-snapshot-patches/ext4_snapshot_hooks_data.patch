Index: linux-2.6.37.1+/fs/ext4/inode.c
===================================================================
--- linux-2.6.37.1+.orig/fs/ext4/inode.c	2010-11-26 21:57:30.000000000 +0530
+++ linux-2.6.37.1+/fs/ext4/inode.c	2010-11-26 21:59:27.000000000 +0530
@@ -974,6 +974,26 @@
 
 	partial = ext4_get_branch(inode, depth, offsets, chain, &err);
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+	if (!partial && flags &&
+			ext4_snapshot_should_move_data(inode)) {
+		first_block = le32_to_cpu(chain[depth - 1].key);
+		blocks_to_boundary = 0;
+		/* should move 1 data block to snapshot? */
+		err = ext4_snapshot_get_move_access(handle, inode,
+				first_block, 0);
+		if (err)
+			/* do not map found block */
+			partial = chain + depth - 1;
+		if (err < 0)
+			/* cleanup the whole chain and exit */
+			goto cleanup;
+		if (err > 0)
+			/* check again under truncate_mutex */
+			err = -EAGAIN;
+	}
+
+#endif
 	/* Simplest case - block found, no allocation needed */
 	if (!partial) {
 		first_block = le32_to_cpu(chain[depth - 1].key);
@@ -1017,6 +1037,45 @@
 				&count, goal,
 				offsets + (partial - chain), partial);
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+	if (*(partial->p)) {
+      int ret;
+      /* old block is being replaced with a new block */
+      // if (buffer_partial_write(bh_result) &&
+      //  !buffer_uptodate(bh_result)) {
+        /* read old block data before moving it to snapshot */
+
+
+        //map_bh(bh_result, inode->i_sb,
+      //     le32_to_cpu(*(partial->p)));
+
+
+      //ll_rw_block(READ, 1, &bh_result);
+      //wait_on_buffer(bh_result);
+        /* clear old block mapping */
+        //clear_buffer_mapped(bh_result); //JAMNARE
+      // if (!buffer_uptodate(bh_result)) { //JAMNARE
+      //  err = -EIO;
+      //  goto out_mutex;
+      // }
+      //}
+      // if (buffer_partial_write(bh_result))
+        /* prevent zero out of page in block_write_begin() */
+        //SetPageUptodate(bh_result->b_page);
+		/* move old block to snapshot */
+      ret = ext4_snapshot_get_move_access(handle, inode,
+                                          le32_to_cpu(*(partial->p)), 1);
+      if (ret < 1) {
+        /* failed to move to snapshot - free new block */
+        ext4_free_blocks(handle, inode,partial->bh,
+                         le32_to_cpu(partial->key), 1,flags);
+        err = ret ? : -EIO;
+        goto out_mutex;
+      }
+      /* block moved to snapshot - continue to splice new block */
+      err = 0;
+	}
+#endif
 	/*
 	 * The ext4_splice_branch call will free and forget any buffers
 	 * on the new chain if there is a failure, but that risks using
@@ -1027,6 +1086,7 @@
 	if (!err)
 		err = ext4_splice_branch(handle, inode, map->m_lblk,
 					 partial, indirect_blks, count);
+ out_mutex:
 	if (err)
 		goto cleanup;
 
@@ -1593,6 +1653,9 @@
 			    loff_t pos, unsigned len, unsigned flags,
 			    struct page **pagep, void **fsdata)
 {
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+	struct buffer_head *bh = NULL;
+#endif
 	struct inode *inode = mapping->host;
 	int ret, needed_blocks;
 	handle_t *handle;
@@ -1617,7 +1680,6 @@
 		ret = PTR_ERR(handle);
 		goto out;
 	}
-
 	/* We cannot recurse into the filesystem as the transaction is already
 	 * started */
 	flags |= AOP_FLAG_NOFS;
@@ -1629,6 +1691,35 @@
 		goto out;
 	}
 	*pagep = page;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+	/*
+	 * XXX: We can also check ext4_snapshot_has_active() here and we don't
+	 * need to unmap the buffers is there is no active snapshot, but the
+	 * result must be valid throughout the writepage() operation and to
+	 * guarantee this we have to know that the transaction is not restarted.
+	 * Can we count on that?
+	 */
+	if (ext4_snapshot_should_move_data(inode)) {
+		if (!page_has_buffers(page))
+			create_empty_buffers(page, inode->i_sb->s_blocksize, 0);
+		/* snapshots only work when blocksize == pagesize */
+		bh = page_buffers(page);
+		if (len < PAGE_CACHE_SIZE)
+			/* read block before moving it to snapshot */
+			set_buffer_partial_write(bh);
+		else
+			clear_buffer_partial_write(bh);
+		/*
+		 * make sure that get_block() is called even if the buffer is mapped,
+		 * but not if it is already a part of any transaction. in data=ordered,
+		 * the only mode supported by ext4, all dirty data buffers are flushed
+		 * on snapshot take via freeze_fs() API.
+		 */
+		if (buffer_mapped(bh) && !buffer_jbd(bh))
+			clear_buffer_mapped(bh);
+	}
+
+#endif
 
 	if (ext4_should_dioread_nolock(inode))
 		ret = __block_write_begin(page, pos, len, ext4_get_block_write);
@@ -1639,6 +1730,14 @@
 		ret = walk_page_buffers(handle, page_buffers(page),
 				from, to, NULL, do_journal_get_write_access);
 	}
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+	/*
+	 * buffer_partial_write() is only used by this function to pass the
+	 * information to ext4_get_block() and should be cleared on exit.
+	 */
+	if (bh)
+		clear_buffer_partial_write(bh);
+#endif
 
 	if (ret) {
 		unlock_page(page);
@@ -4036,6 +4135,20 @@
 			goto unlock;
 	}
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+	/* check if block needs to be moved to snapshot before zeroing */
+	if (ext4_snapshot_should_move_data(inode)) {
+		err = ext4_get_block(inode, iblock, bh, 1);
+		if (err)
+			goto unlock;
+		if (buffer_new(bh)) {
+			unmap_underlying_metadata(bh->b_bdev,
+					bh->b_blocknr);
+			clear_buffer_new(bh);
+		}
+	}
+
+#endif
 	if (ext4_should_journal_data(inode)) {
 		BUFFER_TRACE(bh, "get write access");
 		err = ext4_journal_get_write_access(handle, bh);
Index: linux-2.6.37.1+/fs/ext4/Kconfig
===================================================================
--- linux-2.6.37.1+.orig/fs/ext4/Kconfig	2010-11-26 21:57:30.000000000 +0530
+++ linux-2.6.37.1+/fs/ext4/Kconfig	2010-11-26 21:58:19.000000000 +0530
@@ -117,3 +117,13 @@
 	  Before deleting file blocks in ext4_free_blocks(),
 	  we call the snapshot API snapshot_get_delete_access(),
 	  to optionally move the block to the snapshot file.
+
+config EXT4_FS_SNAPSHOT_HOOKS_DATA
+	bool "snapshot hooks - move data blocks"
+	depends on EXT4_FS_SNAPSHOT
+	default y
+	help
+	  Before every regular file data buffer write,
+	  the function ext4_get_block() is called to map the buffer to disk.
+	  We use this hook to call the snapshot API snapshot_get_move_access(),
+	  to optionally move the block to the snapshot file.
Index: linux-2.6.37.1+/fs/ext4/snapshot.h
===================================================================
--- linux-2.6.37.1+.orig/fs/ext4/snapshot.h	2010-11-26 21:57:30.000000000 +0530
+++ linux-2.6.37.1+/fs/ext4/snapshot.h	2010-11-26 21:58:19.000000000 +0530
@@ -97,6 +97,13 @@
 #define SNAPSHOT_SET_DISABLED(inode)		\
 	i_size_write((inode), 0)
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+enum ext4_bh_state_bits {
+	BH_Partial_Write = 31,	/* Buffer should be read before write */
+};
+
+BUFFER_FNS(Partial_Write, partial_write)
+#endif
 
 
 #define ext4_snapshot_cow(handle, inode, bh, cow) 0
@@ -159,6 +166,33 @@
 }
 
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+/*
+ * get_move_access() - move block to snapshot
+ * @handle:	JBD handle
+ * @inode:	owner of @block
+ * @block:	address of @block
+ * @move:	if false, only test if @block needs to be moved
+ *
+ * Called from ext4_get_blocks_handle() before overwriting a data block,
+ * when buffer_move() is true.  Specifically, only data blocks of regular files,
+ * whose data is not being journaled are moved on full page write.
+ * Journaled data blocks are COWed on get_write_access().
+ * Snapshots and excluded files blocks are never moved-on-write.
+ * If @move is true, then truncate_mutex is held.
+ *
+ * Return values:
+ * = 1 - @block was moved or may not be overwritten
+ * = 0 - @block may be overwritten
+ * < 0 - error
+ */
+static inline int ext4_snapshot_get_move_access(handle_t *handle,
+		struct inode *inode, ext4_fsblk_t block, int move)
+{
+	return ext4_snapshot_move(handle, inode, block, 1, move);
+}
+
+#endif
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DELETE
 /*
  * get_delete_access() - move count blocks to snapshot
@@ -220,6 +254,18 @@
 
 
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+/*
+ * check if @inode data blocks should be moved-on-write
+ */
+static inline int ext4_snapshot_should_move_data(struct inode *inode)
+{
+	/* when a data block is journaled, it is already COWed as metadata */
+	if (ext4_should_journal_data(inode))
+		return 0;
+	return 1;
+}
+#endif
 
 
 

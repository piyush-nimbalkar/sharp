Index: linux_dir/fs/ext4/Kconfig
===================================================================
--- linux_dir.orig/fs/ext4/Kconfig	2010-11-24 18:25:59.000000000 +0530
+++ linux_dir/fs/ext4/Kconfig	2010-11-24 18:28:36.000000000 +0530
@@ -225,6 +225,17 @@
 	  recursion that would be caused by COWing these blocks after the
 	  snapshot becomes active.
 
+config EXT4_FS_SNAPSHOT_CTL_FIX
+	bool "snapshot control - fix new snapshot"
+	depends on EXT4_FS_SNAPSHOT_CTL_INIT
+	default y
+	help
+	  On snapshot take, after copying the pre-allocated blocks, some are
+	  fixed to make the snapshot image appear as a valid Ext2 file system.
+	  The has_journal and has_snapshot flags are cleared from the super
+	  block as well as the journal inode and last snapshot inode fields.
+	  All snapshot inodes are cleared (to appear as empty inodes).
+
 config EXT4_FS_SNAPSHOT_BLOCK_MOVE
 	bool "snapshot block operation - move blocks to snapshot"
 	depends on EXT4_FS_SNAPSHOT_BLOCK
Index: linux_dir/fs/ext4/snapshot_ctl.c
===================================================================
--- linux_dir.orig/fs/ext4/snapshot_ctl.c	2010-11-24 18:24:49.000000000 +0530
+++ linux_dir/fs/ext4/snapshot_ctl.c	2010-11-24 18:26:13.000000000 +0530
@@ -400,6 +400,9 @@
 	unsigned long ino;
 	struct ext4_iloc iloc;
 	ext4_fsblk_t bmap_blk = 0, imap_blk = 0, inode_blk = 0;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+	ext4_fsblk_t prev_inode_blk = 0;
+#endif
 #endif
 	ext4_fsblk_t snapshot_blocks = le32_to_cpu(sbi->s_es->s_blocks_count);
 	if (active_snapshot) {
@@ -557,7 +560,13 @@
 		goto out_handle;
 	}
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+	/* start with root inode and continue with snapshot list */
+	ino = EXT4_ROOT_INO;
+alloc_inode_blocks:
+#else
 	ino = inode->i_ino;
+#endif
 	/*
 	 * pre-allocate the following blocks in the new snapshot:
 	 * - block and inode bitmap blocks of ino's block group
@@ -570,6 +579,13 @@
 
 	iloc.block_group = 0;
 	inode_blk = ext4_get_inode_block(sb, ino, &iloc);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+	if (!inode_blk || inode_blk == prev_inode_blk)
+		goto next_snapshot;
+
+	/* not same inode and bitmap blocks as prev snapshot */
+	prev_inode_blk = inode_blk;
+#endif
 	bmap_blk = 0;
 	imap_blk = 0;
 	desc = ext4_get_group_desc(sb, iloc.block_group, NULL);
@@ -618,6 +634,12 @@
 			err = -EIO;
 		goto out_handle;
 	}
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+	if (ino == EXT4_ROOT_INO) {
+		ino = inode->i_ino;
+		goto alloc_inode_blocks;
+	}
+#endif
 #endif
 
 	snapshot_debug(1, "snapshot (%u) created\n", inode->i_generation);
@@ -722,6 +744,10 @@
 	struct inode *curr_inode;
 	struct ext4_iloc iloc;
 	struct ext4_group_desc *desc;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+	ext4_fsblk_t prev_inode_blk = 0;
+	struct ext4_inode *raw_inode;
+#endif
 	int i;
 #endif
 	int err = -EIO;
@@ -776,6 +802,18 @@
 	 */
 	lock_buffer(sbh);
 	memcpy(sbh->b_data, sbi->s_sbh->b_data, sb->s_blocksize);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+	/*
+	 * Convert from Ext4 to Ext3 super block:
+	 * Remove the HAS_SNAPSHOT flag and snapshot inode number.
+	 * Set the IS_SNAPSHOT flag to signal fsck this is a snapshot image.
+	 */
+	es->s_feature_ro_compat &=
+		~cpu_to_le32(EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT);
+	es->s_snapshot_inum = 0;
+	es->s_snapshot_list = 0;
+	es->s_flags |= cpu_to_le32(EXT4_FLAGS_IS_SNAPSHOT);
+#endif
 	set_buffer_uptodate(sbh);
 	unlock_buffer(sbh);
 	mark_buffer_dirty(sbh);
@@ -793,7 +831,13 @@
 			goto out_unlockfs;
 	}
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+	/* start with root inode and continue with snapshot list */
+	curr_inode = sb->s_root->d_inode;
+copy_inode_blocks:
+#else
 	curr_inode = inode;
+#endif
 	/*
 	 * copy the following blocks to the new snapshot:
 	 * - block and inode bitmap blocks of curr_inode block group
@@ -808,6 +852,11 @@
 		err = err ? : -EIO;
 		goto out_unlockfs;
 	}
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+	if (iloc.bh->b_blocknr == prev_inode_blk)
+		goto fix_inode_copy;
+	prev_inode_blk = iloc.bh->b_blocknr;
+#endif
 	for (i = 0; i < COPY_INODE_BLOCKS_NUM; i++)
 		brelse(bhs[i]);
 	bhs[COPY_BLOCK_BITMAP] = sb_bread(sb,
@@ -824,6 +873,35 @@
 			goto out_unlockfs;
 		mask = NULL;
 	}
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+fix_inode_copy:
+	/* get snapshot copy of raw inode */
+	iloc.bh = sbh;
+	raw_inode = ext4_raw_inode(&iloc);
+	if (curr_inode->i_ino != EXT4_ROOT_INO) {
+		/*
+		 * Snapshot inode blocks are excluded from COW bitmap,
+		 * so they appear to be not allocated in the snapshot's
+		 * block bitmap.  If we want the snapshot image to pass
+		 * fsck with no errors, we need to detach those blocks
+		 * from the copy of the snapshot inode, so we fix the
+		 * snapshot inodes to appear as empty regular files.
+		 */
+		raw_inode->i_size = 0;
+		raw_inode->i_size_high = 0;
+		raw_inode->i_blocks_lo = 0;
+		raw_inode->i_blocks_high = 0;
+		raw_inode->i_flags &= cpu_to_le32(~EXT4_FL_SNAPSHOT_MASK);
+		memset(raw_inode->i_block, 0, sizeof(raw_inode->i_block));
+	}
+	mark_buffer_dirty(sbh);
+	sync_dirty_buffer(sbh);
+
+	if (curr_inode->i_ino == EXT4_ROOT_INO) {
+		curr_inode = inode;
+		goto copy_inode_blocks;
+	}
+#endif
 #endif
 
 	/* reset COW bitmap cache */

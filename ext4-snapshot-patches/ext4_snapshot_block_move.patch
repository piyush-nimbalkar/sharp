Index: linux_dir/fs/ext4/inode.c
===================================================================
--- linux_dir.orig/fs/ext4/inode.c	2010-11-24 17:25:27.000000000 +0530
+++ linux_dir/fs/ext4/inode.c	2010-11-24 18:12:49.000000000 +0530
@@ -663,6 +663,13 @@
 			new_blocks[index++] = current_block++;
 			count--;
 		}
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+		if (blks == 0 && target == 0) {
+			/* mapping data blocks */
+			*err = 0;
+			return 0;
+		}
+#endif
 		if (count > 0) {
 			/*
 			 * save the new block number
@@ -753,10 +760,17 @@
  *	ext4_alloc_block() (normally -ENOSPC). Otherwise we set the chain
  *	as described above and return 0.
  */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+static int ext4_alloc_branch_cow(handle_t *handle, struct inode *inode,
+			ext4_fsblk_t iblock, int indirect_blks,
+				  int *blks, ext4_fsblk_t goal,
+				  int *offsets, Indirect *branch, int cmd)
+#else
 static int ext4_alloc_branch(handle_t *handle, struct inode *inode,
 			     ext4_lblk_t iblock, int indirect_blks,
 			     int *blks, ext4_fsblk_t goal,
 			     ext4_lblk_t *offsets, Indirect *branch)
+#endif
 {
 	int blocksize = inode->i_sb->s_blocksize;
 	int i, n = 0;
@@ -765,7 +779,27 @@
 	int num;
 	ext4_fsblk_t new_blocks[4];
 	ext4_fsblk_t current_block;
-
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+	if (SNAPMAP_ISMOVE(cmd)) {
+		/* mapping snapshot block to block device block */
+		current_block = SNAPSHOT_BLOCK(iblock);
+		num = 0;
+		if (indirect_blks > 0) {
+			/* allocating only indirect blocks */
+			ext4_alloc_blocks(handle, inode, goal, indirect_blks,
+					0, new_blocks, &err);
+			if (err)
+				return err;
+		}
+		/* charge snapshot file owner for moved blocks */
+		if (dquot_alloc_block(inode, *blks)) {
+			err = -EDQUOT;
+			goto failed;
+		}
+		num = *blks;
+		new_blocks[indirect_blks] = current_block;
+	} else
+#endif
 	num = ext4_alloc_blocks(handle, inode, iblock, goal, indirect_blks,
 				*blks, new_blocks, &err);
 	if (err)
@@ -837,9 +871,15 @@
 	}
 	for (i = n+1; i < indirect_blks; i++)
 		ext4_free_blocks(handle, inode, 0, new_blocks[i], 1, 0);
-
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+	if (SNAPMAP_ISMOVE(cmd) && num > 0)
+		/* don't charge snapshot file owner if move failed */
+		dquot_free_block(inode, num);
+	else if (num > 0)
+      ext4_free_blocks(handle, inode, 0, new_blocks[i], num, 0);
+#else
 	ext4_free_blocks(handle, inode, 0, new_blocks[i], num, 0);
-
+#endif
 	return err;
 }
 
@@ -857,9 +897,14 @@
  * inode (->i_blocks, etc.). In case of success we end up with the full
  * chain to new block and return 0.
  */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+static int ext4_splice_branch_cow(handle_t *handle, struct inode *inode,
+			long block, Indirect *where, int num, int blks, int cmd)
+#else
 static int ext4_splice_branch(handle_t *handle, struct inode *inode,
 			      ext4_lblk_t block, Indirect *where, int num,
 			      int blks)
+#endif
 {
 	int i;
 	int err = 0;
@@ -894,6 +939,11 @@
 		for (i = 1; i < blks; i++)
 			*(where->p + i) = cpu_to_le32(current_block++);
 	}
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+	if (SNAPMAP_ISMOVE(cmd))
+		/* don't update i_block_alloc_info with moved block */
+		block_i = NULL;
+#endif
 
 	/* We are done with atomic stuff, now do the rest of housekeeping */
 	/* had we spliced it onto indirect block? */
@@ -930,9 +980,17 @@
 		ext4_free_blocks(handle, inode, where[i].bh, 0, 1,
 				 EXT4_FREE_BLOCKS_FORGET);
 	}
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+	if (SNAPMAP_ISMOVE(cmd))
+		/* don't charge snapshot file owner if move failed */
+		dquot_free_block(inode, blks);
+	else
+      ext4_free_blocks(handle, inode, 0, le32_to_cpu(where[num].key),
+                       blks, 0);
+#else
 	ext4_free_blocks(handle, inode, 0, le32_to_cpu(where[num].key),
 			 blks, 0);
-
+#endif
 	return err;
 }
 
@@ -1093,9 +1151,15 @@
 	/*
 	 * Block out ext4_truncate while we alter the tree
 	 */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+	err = ext4_alloc_branch_cow(handle, inode, iblock, indirect_blks,
+				     &count, goal, offsets + (partial - chain),
+				     partial, create);
+#else
 	err = ext4_alloc_branch(handle, inode, map->m_lblk, indirect_blks,
 				&count, goal,
 				offsets + (partial - chain), partial);
+#endif
 	if (err)
 		goto out_mutex;
 
@@ -1148,8 +1212,13 @@
 	 * may need to return -EAGAIN upwards in the worst case.  --sct
 	 */
 	if (!err)
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+		err = ext4_splice_branch_cow(handle, inode, iblock, partial,
+					      indirect_blks, count, create);
+#else
 		err = ext4_splice_branch(handle, inode, map->m_lblk,
 					 partial, indirect_blks, count);
+#endif
  out_mutex:
 	if (err)
 		goto cleanup;
Index: linux_dir/fs/ext4/Kconfig
===================================================================
--- linux_dir.orig/fs/ext4/Kconfig	2010-11-24 17:25:27.000000000 +0530
+++ linux_dir/fs/ext4/Kconfig	2010-11-24 17:28:26.000000000 +0530
@@ -204,3 +204,13 @@
 	help
 	  Implementation of copying blocks into a snapshot file.
 	  This mechanism is used to copy-on-write metadata blocks to snapshot.
+
+config EXT4_FS_SNAPSHOT_BLOCK_MOVE
+	bool "snapshot block operation - move blocks to snapshot"
+	depends on EXT4_FS_SNAPSHOT_BLOCK
+	default y
+	help
+	  Implementation of moving blocks into a snapshot file.
+	  The move block command maps an allocated blocks to the snapshot file,
+	  allocating only the indirect blocks when needed.
+	  This mechanism is used to move-on-write data blocks to snapshot.
Index: linux_dir/fs/ext4/snapshot.c
===================================================================
--- linux_dir.orig/fs/ext4/snapshot.c	2010-11-24 17:25:27.000000000 +0530
+++ linux_dir/fs/ext4/snapshot.c	2010-11-24 17:28:26.000000000 +0530
@@ -12,6 +12,9 @@
  * Ext4 snapshots core functions.
  */
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+#include <linux/quotaops.h>
+#endif
 #include "snapshot.h"
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK
@@ -408,3 +411,109 @@
 }
 
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+/*
+ * ext4_snapshot_test_and_move - move blocks to active snapshot
+ * @where:	name of caller function
+ * @handle:	JBD handle
+ * @inode:	owner of blocks (NULL for global metadata blocks)
+ * @block:	address of first block to move
+ * @maxblocks:	max. blocks to move
+ * @move:	if false, only test if @block needs to be moved
+ *
+ * Return values:
+ * > 0 - no. of blocks that were (or needs to be) moved to snapshot
+ * = 0 - @block doesn't need to be moved
+ * < 0 - error
+ */
+int ext4_snapshot_test_and_move(const char *where, handle_t *handle,
+	struct inode *inode, ext4_fsblk_t block, int maxblocks, int move)
+{
+	struct super_block *sb = handle->h_transaction->t_journal->j_private;
+	struct inode *active_snapshot = ext4_snapshot_has_active(sb);
+	ext4_fsblk_t blk = 0;
+	int err = 0, count = maxblocks;
+	int excluded = 0;
+
+	if (!active_snapshot)
+		/* no active snapshot - no need to move */
+		return 0;
+
+	ext4_snapshot_trace_cow(where, handle, sb, inode, NULL, block, move);
+
+	BUG_ON(IS_COWING(handle) || inode == active_snapshot);
+
+	/* BEGIN moving */
+	ext4_snapshot_cow_begin(handle);
+
+	if (inode)
+		excluded = ext4_snapshot_excluded(inode);
+	if (excluded) {
+		/* don't move excluded file block to snapshot */
+		snapshot_debug_hl(4, "file (%lu) excluded from snapshot\n",
+				inode->i_ino);
+		move = 0;
+	}
+
+	if (excluded)
+		goto out;
+	if (!err) {
+		/* block not in COW bitmap - no need to move */
+		trace_cow_inc(handle, ok_bitmap);
+		goto out;
+	}
+
+#ifdef CONFIG_EXT4_FS_DEBUG
+	if (inode == NULL &&
+		!(EXT4_I(active_snapshot)->i_flags & EXT4_UNRM_FL)) {
+		/*
+		 * This is ext4_group_extend() "freeing" the blocks that
+		 * were added to the block group.  These block should not be
+		 * moved to snapshot, unless the snapshot is marked with the
+		 * UNRM flag for large snapshot creation test.
+		 */
+		trace_cow_inc(handle, ok_bitmap);
+		err = 0;
+		goto out;
+	}
+#endif
+
+	/* count blocks are in use by snapshot - check if @block is mapped */
+	err = ext4_snapshot_map_blocks(handle, active_snapshot, block, 1, &blk,
+					SNAPMAP_READ);
+	if (err < 0)
+		goto out;
+	if (err > 0) {
+		/* block already mapped in snapshot - no need to move */
+		trace_cow_inc(handle, ok_mapped);
+		err = 0;
+		goto out;
+	}
+
+	/* @count blocks need to be moved */
+	err = count;
+	if (!move)
+		/* don't move - we were just checking */
+		goto out;
+
+	/* try to move @count blocks from inode to snapshot */
+	err = ext4_snapshot_map_blocks(handle, active_snapshot, block,
+			count, NULL, SNAPMAP_MOVE);
+	if (err <= 0)
+		goto out;
+	count = err;
+	/*
+	 * User should no longer be charged for these blocks.
+	 * Snapshot file owner was charged for these blocks
+	 * when they were mapped to snapshot file.
+	 */
+	if (inode)
+		dquot_free_block(inode, count);
+	trace_cow_add(handle, moved, count);
+out:
+	/* END moving */
+	ext4_snapshot_cow_end(where, handle, block, err);
+	return err;
+}
+
+#endif
Index: linux_dir/fs/ext4/snapshot.h
===================================================================
--- linux_dir.orig/fs/ext4/snapshot.h	2010-11-24 17:25:27.000000000 +0530
+++ linux_dir/fs/ext4/snapshot.h	2010-11-24 17:28:26.000000000 +0530
@@ -166,7 +166,21 @@
 #define ext4_snapshot_cow(handle, inode, bh, cow) 0
 #endif
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_BLOCK_MOVE
+extern int ext4_snapshot_test_and_move(const char *where,
+		handle_t *handle, struct inode *inode,
+		ext4_fsblk_t block, int maxblocks, int move);
+
+/*
+ * test if blocks should be moved to snapshot
+ * and if they should, try to move them to the active snapshot
+ */
+#define ext4_snapshot_move(handle, inode, block, num, move)	\
+	ext4_snapshot_test_and_move(__func__, handle, inode,	\
+			block, num, move)
+#else
 #define ext4_snapshot_move(handle, inode, block, num, move) (num)
+#endif
 
 /*
  * Block access functions

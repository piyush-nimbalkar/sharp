diff -Nuarp a/fs/ext4/Kconfig b/fs/ext4/Kconfig
--- a/fs/ext4/Kconfig	2010-11-11 10:47:18.000000000 +0200
+++ b/fs/ext4/Kconfig	2010-11-11 10:47:18.000000000 +0200
@@ -363,3 +363,17 @@ config EXT4_FS_SNAPSHOT_JOURNAL_TRACE
 	default y
 	help
 	  Extra debug prints to trace snapshot usage of buffer credits.
+
+config EXT4_FS_SNAPSHOT_LIST
+	bool "snapshot list support"
+	depends on EXT4_FS_SNAPSHOT_FILE
+	default y
+	help
+	  Implementation of multiple incremental snapshots.
+	  Snapshot inodes are chained on a list starting at the super block,
+	  both on-disk and in-memory, similar to the orphan inodes.  We reuse
+	  the orphan inode list functions to manipulate the snapshot list.
+	  Unlink and truncate of snapshot inodes on the list is not allowed,
+	  so an inode can never be chained on both orphan and snapshot lists.
+	  We make use of this fact to overload the in-memory inode field
+	  ext4_inode_info.i_orphan for the chaining of snapshots.
diff -Nuarp a/fs/ext4/namei.c b/fs/ext4/namei.c
--- a/fs/ext4/namei.c	2010-11-11 10:47:19.000000000 +0200
+++ b/fs/ext4/namei.c	2010-11-11 10:47:18.000000000 +0200
@@ -1940,9 +1940,30 @@ static int empty_dir (struct inode * ino
  * At filesystem recovery time, we walk this list deleting unlinked
  * inodes and truncating linked inodes in ext4_orphan_cleanup().
  */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+/*
+ * On errors, ext4_std_error() is called and transaction is aborted.
+ */
 int ext4_orphan_add(handle_t *handle, struct inode *inode)
 {
 	struct super_block *sb = inode->i_sb;
+	/*
+	 * only get the field address from the super block structs
+	 * the content of the field will only be changed under lock_super()
+	 */
+	return ext4_inode_list_add(handle, inode, &NEXT_ORPHAN(inode),
+			&EXT4_SB(sb)->s_es->s_last_orphan,
+			&EXT4_SB(sb)->s_orphan, "orphan");
+}
+
+int ext4_inode_list_add(handle_t *handle, struct inode *inode,
+		__u32 *i_next, __le32 *s_last,
+		struct list_head *s_list, const char *name)
+#else
+int ext4_orphan_add(handle_t *handle, struct inode *inode)
+#endif
+{
+	struct super_block *sb = inode->i_sb;
 	struct ext4_iloc iloc;
 	int err = 0, rc;
 
@@ -1971,9 +1992,18 @@ int ext4_orphan_add(handle_t *handle, s
 	if (err)
 		goto out_unlock;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	snapshot_debug(4, "add inode %lu to %s list\n",
+			inode->i_ino, name);
+
+	/* Insert this inode at the head of the on-disk inode list... */
+	*i_next = le32_to_cpu(*s_last);
+	*s_last = cpu_to_le32(inode->i_ino);
+#else
 	/* Insert this inode at the head of the on-disk orphan list... */
 	NEXT_ORPHAN(inode) = le32_to_cpu(EXT4_SB(sb)->s_es->s_last_orphan);
 	EXT4_SB(sb)->s_es->s_last_orphan = cpu_to_le32(inode->i_ino);
+#endif
 	err = ext4_journal_dirty_metadata(handle, EXT4_SB(sb)->s_sbh);
 	rc = ext4_mark_iloc_dirty(handle, inode, &iloc);
 	if (!err)
@@ -1988,11 +2018,22 @@ int ext4_orphan_add(handle_t *handle, s
 	 * This is safe: on error we're going to ignore the orphan list
 	 * anyway on the next recovery. */
 	if (!err)
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+		list_add(&EXT4_I(inode)->i_orphan, s_list);
+#else
 		list_add(&EXT4_I(inode)->i_orphan, &EXT4_SB(sb)->s_orphan);
+#endif
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	snapshot_debug(4, "last_%s will point to inode %lu\n",
+			name, inode->i_ino);
+	snapshot_debug(4, "%s inode %lu will point to inode %d\n",
+			name, inode->i_ino, *i_next);
+#else
 	jbd_debug(4, "superblock will point to %lu\n", inode->i_ino);
 	jbd_debug(4, "orphan inode %lu will point to %d\n",
 			inode->i_ino, NEXT_ORPHAN(inode));
+#endif
 out_unlock:
 	unlock_super(sb);
 	ext4_std_error(inode->i_sb, err);
@@ -2003,8 +2044,29 @@ out_unlock:
  * ext4_orphan_del() removes an unlinked or truncated inode from the list
  * of such inodes stored on disk, because it is finally being cleaned up.
  */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
 int ext4_orphan_del(handle_t *handle, struct inode *inode)
 {
+	struct super_block *sb = inode->i_sb;
+	/*
+	 * only get the field address from the super block structs
+	 * the content of the field will only be changed under lock_super()
+	 */
+	return ext4_inode_list_del(handle, inode, &NEXT_ORPHAN(inode),
+			&EXT4_SB(sb)->s_es->s_last_orphan,
+			&EXT4_SB(sb)->s_orphan, "orphan");
+}
+
+#define NEXT_INODE_OFFSET (((char *)inode)-((char *)i_next))
+#define NEXT_INODE(i_prev) (*(__u32 *)(((char *)i_prev)-NEXT_INODE_OFFSET))
+
+int ext4_inode_list_del(handle_t *handle, struct inode *inode,
+		__u32 *i_next, __le32 *s_last,
+		struct list_head *s_list, const char *name)
+#else
+int ext4_orphan_del(handle_t *handle, struct inode *inode)
+#endif
+{
 	struct list_head *prev;
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	struct ext4_sb_info *sbi;
@@ -2016,11 +2078,20 @@ int ext4_orphan_del(handle_t *handle, s
 	if (list_empty(&ei->i_orphan))
 		goto out;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	ino_next = *i_next;
+#else
 	ino_next = NEXT_ORPHAN(inode);
+#endif
 	prev = ei->i_orphan.prev;
 	sbi = EXT4_SB(inode->i_sb);
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	snapshot_debug(4, "remove inode %lu from %s list\n", inode->i_ino,
+		       name);
+#else
 	jbd_debug(4, "remove inode %lu from orphan list\n", inode->i_ino);
+#endif
 
 	list_del_init(&ei->i_orphan);
 
@@ -2035,30 +2106,53 @@ int ext4_orphan_del(handle_t *handle, s
 	if (err)
 		goto out_err;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	if (prev == s_list) {
+		snapshot_debug(4, "last_%s will point to inode %lu\n", name,
+				ino_next);
+#else
 	if (prev == &sbi->s_orphan) {
 		jbd_debug(4, "superblock will point to %lu\n", ino_next);
+#endif
 		BUFFER_TRACE(sbi->s_sbh, "get_write_access");
 		err = ext4_journal_get_write_access(handle, sbi->s_sbh);
 		if (err)
 			goto out_brelse;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+		*s_last = cpu_to_le32(ino_next);
+#else
 		sbi->s_es->s_last_orphan = cpu_to_le32(ino_next);
+#endif
 		err = ext4_journal_dirty_metadata(handle, sbi->s_sbh);
 	} else {
 		struct ext4_iloc iloc2;
 		struct inode *i_prev =
 			&list_entry(prev, struct ext4_inode_info, i_orphan)->vfs_inode;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+		snapshot_debug(4, "%s inode %lu will point to inode %lu\n",
+			  name, i_prev->i_ino, ino_next);
+#else
 		jbd_debug(4, "orphan inode %lu will point to %lu\n",
 			  i_prev->i_ino, ino_next);
+#endif
 		err = ext4_reserve_inode_write(handle, i_prev, &iloc2);
 		if (err)
 			goto out_brelse;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+		NEXT_INODE(i_prev) = ino_next;
+#else
 		NEXT_ORPHAN(i_prev) = ino_next;
+#endif
 		err = ext4_mark_iloc_dirty(handle, i_prev, &iloc2);
 	}
 	if (err)
 		goto out_brelse;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	*i_next = 0;
+#else
 	NEXT_ORPHAN(inode) = 0;
+#endif
 	err = ext4_mark_iloc_dirty(handle, inode, &iloc);
 
 out_err:
diff -Nuarp a/fs/ext4/ext4_sb.h b/fs/ext4/ext4_sb.h
--- a/fs/ext4/ext4_sb.h	2010-11-11 10:47:19.000000000 +0200
+++ b/fs/ext4/ext4_sb.h	2010-11-11 10:47:18.000000000 +0200
@@ -102,6 +102,9 @@ struct ext4_sb_info {
 	struct ext4_group_info *s_group_info;	/* [ sb_bgl_lock ] */
 	struct mutex s_snapshot_mutex;		/* protects 2 fields below: */
 	struct inode *s_active_snapshot;	/* [ s_snapshot_mutex ] */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	struct list_head s_snapshot_list;	/* [ s_snapshot_mutex ] */
+#endif
 #endif
 #ifdef CONFIG_JBD_DEBUG
 	struct timer_list turn_ro_timer;	/* For turning read-only (crash simulation) */
diff -Nuarp a/fs/ext4/snapshot_ctl.c b/fs/ext4/snapshot_ctl.c
--- a/fs/ext4/snapshot_ctl.c	2010-11-11 10:47:19.000000000 +0200
+++ b/fs/ext4/snapshot_ctl.c	2010-11-11 10:47:18.000000000 +0200
@@ -389,12 +389,28 @@ static int ext4_snapshot_create(struct 
 #endif
 #endif
 	ext4_fsblk_t snapshot_blocks = le32_to_cpu(sbi->s_es->s_blocks_count);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	struct list_head *l, *list = &sbi->s_snapshot_list;
+
+	if (!list_empty(list)) {
+		struct inode *last_snapshot =
+			&list_first_entry(list, struct ext4_inode_info,
+					  i_snaplist)->vfs_inode;
+		if (active_snapshot != last_snapshot) {
+			snapshot_debug(1, "failed to add snapshot because last"
+				       " snapshot (%u) is not active\n",
+				       last_snapshot->i_generation);
+			return -EINVAL;
+		}
+	}
+#else
 	if (active_snapshot) {
 		snapshot_debug(1, "failed to add snapshot because active "
 			       "snapshot (%u) has to be deleted first\n",
 			       active_snapshot->i_generation);
 		return -EINVAL;
 	}
+#endif
 
 	/* prevent take of unlinked snapshot file */
 	if (!inode->i_nlink) {
@@ -457,6 +473,31 @@ static int ext4_snapshot_create(struct 
 		EXT4_SET_RO_COMPAT_FEATURE(sb,
 			EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT);
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	/* add snapshot list reference */
+	if (!igrab(inode)) {
+		err = -EIO;
+		goto out_handle;
+	}
+	/*
+	 * First, the snapshot is added to the in-memory and on-disk list.
+	 * At the end of snapshot_take(), it will become the active snapshot
+	 * in-memory and on-disk.
+	 * Finally, if snapshot_create() or snapshot_take() has failed,
+	 * snapshot_update() will remove it from the in-memory and on-disk list.
+	 */
+	err = ext4_inode_list_add(handle, inode, &NEXT_SNAPSHOT(inode),
+			&sbi->s_es->s_snapshot_list,
+			list, "snapshot");
+	/* add snapshot list reference */
+	if (err) {
+		snapshot_debug(1, "failed to add snapshot (%u) to list\n",
+			       inode->i_generation);
+		iput(inode);
+		goto out_handle;
+	}
+	l = list->next;
+#else
 	lock_super(sb);
 	err = ext4_journal_get_write_access(handle, sbi->s_sbh);
 	sbi->s_es->s_snapshot_list = cpu_to_le32(inode->i_ino);
@@ -465,6 +506,7 @@ static int ext4_snapshot_create(struct 
 	unlock_super(sb);
 	if (err)
 		goto out_handle;
+#endif
 
 	err = ext4_mark_inode_dirty(handle, inode);
 	if (err)
@@ -619,12 +661,21 @@ next_snapshot:
 		goto out_handle;
 	}
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL_FIX
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	if (l != list) {
+		ino = list_entry(l, struct ext4_inode_info,
+				i_snaplist)->vfs_inode.i_ino;
+		l = l->next;
+		goto alloc_inode_blocks;
+	}
+#else
 	if (ino == EXT4_ROOT_INO) {
 		ino = inode->i_ino;
 		goto alloc_inode_blocks;
 	}
 #endif
 #endif
+#endif
 
 	snapshot_debug(1, "snapshot (%u) created\n", inode->i_generation);
 	err = 0;
@@ -718,6 +769,10 @@ static char *copy_inode_block_name[COPY_
  */
 int ext4_snapshot_take(struct inode *inode)
 {
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	struct list_head *list = &EXT4_SB(inode->i_sb)->s_snapshot_list;
+	struct list_head *l = list->next;
+#endif
 	struct super_block *sb = inode->i_sb;
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct ext4_super_block *es = NULL;
@@ -913,12 +968,21 @@ fix_inode_copy:
 	mark_buffer_dirty(sbh);
 	sync_dirty_buffer(sbh);
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	if (l != list) {
+		curr_inode = &list_entry(l, struct ext4_inode_info,
+				       i_snaplist)->vfs_inode;
+		l = l->next;
+		goto copy_inode_blocks;
+	}
+#else
 	if (curr_inode->i_ino == EXT4_ROOT_INO) {
 		curr_inode = inode;
 		goto copy_inode_blocks;
 	}
 #endif
 #endif
+#endif
 
 	/* reset COW bitmap cache */
 	err = ext4_snapshot_reset_bitmap_cache(sb, 0);
@@ -1111,6 +1175,16 @@ static int ext4_snapshot_remove(struct 
 	if (err)
 		goto out_handle;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	err = ext4_inode_list_del(handle, inode, &NEXT_SNAPSHOT(inode),
+			&sbi->s_es->s_snapshot_list,
+			&EXT4_SB(inode->i_sb)->s_snapshot_list,
+			"snapshot");
+	if (err)
+		goto out_handle;
+	/* remove snapshot list reference - taken on snapshot_create() */
+	iput(inode);
+#else
 	lock_super(inode->i_sb);
 	err = ext4_journal_get_write_access(handle, sbi->s_sbh);
 	sbi->s_es->s_snapshot_list = 0;
@@ -1119,6 +1193,7 @@ static int ext4_snapshot_remove(struct 
 	unlock_super(inode->i_sb);
 	if (err)
 		goto out_handle;
+#endif
 	/*
 	 * At this point, this snapshot is empty and not on the snapshots list.
 	 * As long as it was on the list it had to have the LIST flag to prevent
@@ -1184,6 +1259,12 @@ int ext4_snapshot_load(struct super_blo
 	int err, num = 0, snapshot_id = 0;
 	int has_active = 0;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	if (!list_empty(&EXT4_SB(sb)->s_snapshot_list)) {
+		snapshot_debug(1, "warning: snapshots already loaded!\n");
+		return -EINVAL;
+	}
+#endif
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE_OLD
 	/* Migrate super block on-disk format */
@@ -1308,8 +1389,15 @@ int ext4_snapshot_load(struct super_blo
 			has_active = 1;
 		}
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+		list_add_tail(&EXT4_I(inode)->i_snaplist,
+			      &EXT4_SB(sb)->s_snapshot_list);
+		load_ino = NEXT_SNAPSHOT(inode);
+		/* keep snapshot list reference */
+#else
 		iput(inode);
 		break;
+#endif
 	}
 
 	if (err) {
@@ -1336,6 +1424,18 @@ int ext4_snapshot_load(struct super_blo
  */
 void ext4_snapshot_destroy(struct super_block *sb)
 {
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	struct list_head *l, *n;
+	/* iterate safe because we are deleting from list and freeing the
+	 * inodes */
+	list_for_each_safe(l, n, &EXT4_SB(sb)->s_snapshot_list) {
+		struct inode *inode = &list_entry(l, struct ext4_inode_info,
+						  i_snaplist)->vfs_inode;
+		list_del_init(&EXT4_I(inode)->i_snaplist);
+		/* remove snapshot list reference */
+		iput(inode);
+	}
+#endif
 	/* deactivate in-memory active snapshot - cannot fail */
 	(void) ext4_snapshot_set_active(sb, NULL);
 }
@@ -1357,6 +1457,13 @@ int ext4_snapshot_update(struct super_b
 	struct inode *used_by = NULL; /* last non-deleted snapshot found */
 	int deleted;
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	struct inode *inode;
+	struct ext4_inode_info *ei;
+	int found_active = 0;
+	int found_enabled = 0;
+	struct list_head *prev;
+#endif
 	int err = 0;
 
 	BUG_ON(read_only && cleanup);
@@ -1364,6 +1471,75 @@ int ext4_snapshot_update(struct super_b
 		EXT4_I(active_snapshot)->i_flags |=
 			EXT4_SNAPFILE_ACTIVE_FL|EXT4_SNAPFILE_LIST_FL;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	/* iterate safe from oldest snapshot backwards */
+	prev = EXT4_SB(sb)->s_snapshot_list.prev;
+	if (list_empty(prev))
+		return 0;
+
+update_snapshot:
+	ei = list_entry(prev, struct ext4_inode_info, i_snaplist);
+	inode = &ei->vfs_inode;
+	prev = ei->i_snaplist.prev;
+
+	/* all snapshots on the list have the LIST flag */
+	ei->i_flags |= EXT4_SNAPFILE_LIST_FL;
+	/* set the 'No_Dump' flag on all snapshots */
+	ei->i_flags |= EXT4_NODUMP_FL;
+
+	/*
+	 * snapshots later than active (failed take) should be removed.
+	 * no active snapshot means failed first snapshot take.
+	 */
+	if (found_active || !active_snapshot) {
+		if (!read_only)
+			err = ext4_snapshot_remove(inode);
+		goto prev_snapshot;
+	}
+
+	deleted = ei->i_flags & EXT4_SNAPFILE_DELETED_FL;
+	if (!deleted && read_only)
+		/* auto enable snapshots on readonly mount */
+		ext4_snapshot_enable(inode);
+
+	/*
+	 * after completion of a snapshot management operation,
+	 * only the active snapshot can have the ACTIVE flag
+	 */
+	if (inode == active_snapshot) {
+		ei->i_flags |= EXT4_SNAPFILE_ACTIVE_FL;
+		found_active = 1;
+		deleted = 0;
+	} else
+		ei->i_flags &= ~EXT4_SNAPFILE_ACTIVE_FL;
+
+	if (found_enabled)
+		/* snapshot is in use by an older enabled snapshot */
+		ei->i_flags |= EXT4_SNAPFILE_INUSE_FL;
+	else
+		/* snapshot is not in use by older enabled snapshots */
+		ei->i_flags &= ~EXT4_SNAPFILE_INUSE_FL;
+
+	if (cleanup && deleted && !used_by)
+		/* remove permanently unused deleted snapshot */
+		err = ext4_snapshot_remove(inode);
+
+	if (!deleted) {
+		if (!found_active)
+			/* newer snapshots are potentially used by
+			 * this snapshot (when it is enabled) */
+			used_by = inode;
+		if (ei->i_flags & EXT4_SNAPFILE_ENABLED_FL)
+			found_enabled = 1;
+	}
+
+prev_snapshot:
+	if (err)
+		return err;
+	/* update prev snapshot */
+	if (prev != &EXT4_SB(sb)->s_snapshot_list)
+		goto update_snapshot;
+#endif
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
 	if (!active_snapshot || !cleanup || used_by)
diff -Nuarp a/fs/ext4/snapshot.h b/fs/ext4/snapshot.h
--- a/fs/ext4/snapshot.h	2010-11-11 10:47:19.000000000 +0200
+++ b/fs/ext4/snapshot.h	2010-11-11 10:47:18.000000000 +0200
@@ -347,6 +347,14 @@ extern struct buffer_head *read_block_bi
 					     unsigned int block_group);
 
 /* namei.c */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+extern int ext4_inode_list_add(handle_t *handle, struct inode *inode,
+				__u32 *i_next, __le32 *s_last,
+				struct list_head *s_list, const char *name);
+extern int ext4_inode_list_del(handle_t *handle, struct inode *inode,
+				__u32 *i_next, __le32 *s_last,
+				struct list_head *s_list, const char *name);
+#endif
 
 /* inode.c */
 extern ext4_fsblk_t ext4_get_inode_block(struct super_block *sb,
diff -Nuarp a/fs/ext4/super.c b/fs/ext4/super.c
--- a/fs/ext4/super.c	2010-11-11 10:47:19.000000000 +0200
+++ b/fs/ext4/super.c	2010-11-11 10:47:18.000000000 +0200
@@ -2064,6 +2064,9 @@ static int ext4_fill_super (struct supe
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE
 	mutex_init(&sbi->s_snapshot_mutex);
 	sbi->s_active_snapshot = NULL;
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST
+	INIT_LIST_HEAD(&sbi->s_snapshot_list); /* snapshot files */
+#endif
 
 #endif
 	needs_recovery = (es->s_last_orphan != 0 ||

Index: linux_dir/fs/ext4/ialloc.c
===================================================================
--- linux_dir.orig/fs/ext4/ialloc.c	2010-11-14 18:28:00.000000000 +0530
+++ linux_dir/fs/ext4/ialloc.c	2010-12-29 21:59:26.000000000 +0530
@@ -915,8 +915,15 @@
 				goto got;
 			}
 			/* we lost it */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_RELEASE
+			err = ext4_journal_release_buffer(handle,
+					 inode_bitmap_bh);
+			if (err)
+				goto fail;
+#else
 			ext4_handle_release_buffer(handle, inode_bitmap_bh);
 			ext4_handle_release_buffer(handle, group_desc_bh);
+#endif
 
 			if (++ino < EXT4_INODES_PER_GROUP(sb))
 				goto repeat_in_this_group;
Index: linux_dir/fs/ext4/Kconfig
===================================================================
--- linux_dir.orig/fs/ext4/Kconfig	2010-12-29 21:46:55.000000000 +0530
+++ linux_dir/fs/ext4/Kconfig	2010-12-29 21:57:56.000000000 +0530
@@ -241,6 +241,20 @@
 	  that enough buffer credits are reserved in the running transaction.
 
 
+config EXT4_FS_SNAPSHOT_JOURNAL_RELEASE
+	bool "snapshot journaled - implement journal_release_buffer()"
+	depends on EXT4_FS_SNAPSHOT_JOURNAL
+	default y
+	help
+	  The API journal_release_buffer() is called to cancel a previous call
+	  to journal_get_write_access() and to recall the used buffer credit.
+	  Current implementation of journal_release_buffer() in JBD is empty,
+	  since no buffer credits are used until the buffer is marked dirty.
+	  However, since the resulting snapshot COW operation cannot be undone,
+	  we try to extend the current transaction to compensate for the used
+	  credits of the extra COW operation, so we don't run out of buffer
+	  credits too soon.
+
 config EXT4_FS_SNAPSHOT_BLOCK_MOVE
 	bool "snapshot block operation - move blocks to snapshot"
 	depends on EXT4_FS_SNAPSHOT_BLOCK
Index: linux_dir/fs/ext4/xattr.c
===================================================================
--- linux_dir.orig/fs/ext4/xattr.c	2010-11-14 18:28:00.000000000 +0530
+++ linux_dir/fs/ext4/xattr.c	2010-12-29 21:57:56.000000000 +0530
@@ -735,7 +735,13 @@
 			int offset = (char *)s->here - bs->bh->b_data;
 
 			unlock_buffer(bs->bh);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_RELEASE
+			error = ext4_journal_release_buffer(handle, bs->bh);
+			if (error)
+				goto cleanup;
+#else
 			jbd2_journal_release_buffer(handle, bs->bh);
+#endif
 			if (ce) {
 				mb_cache_entry_release(ce);
 				ce = NULL;
Index: linux_dir/fs/ext4/ext4_jbd2.c
===================================================================
--- linux_dir.orig/fs/ext4/ext4_jbd2.c	2010-12-29 21:51:21.000000000 +0530
+++ linux_dir/fs/ext4/ext4_jbd2.c	2010-12-29 21:57:56.000000000 +0530
@@ -137,6 +137,40 @@
 	return err;
 }
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_RELEASE
+int __ext4_journal_release_buffer(const char *where, handle_t *handle,
+				struct buffer_head *bh)
+{
+	int err = 0;
+
+	if (IS_COWING(handle))
+		goto out;
+
+	/*
+	 * Trying to cancel a previous call to get_write_access(), which may
+	 * have resulted in a single COW operation.  We don't need to add
+	 * user credits, but if COW credits are too low we will try to
+	 * extend the transaction to compensate for the buffer credits used
+	 * by the extra COW operation.
+	 */
+	err = ext4_journal_extend(handle, 0);
+	if (err > 0) {
+		/* well, we can't say we didn't try - now lets hope
+		 * we have enough buffer credits to spare */
+		snapshot_debug(1, "%s: warning: couldn't extend transaction "
+				"from %s (credits=%d/%d)\n", __func__,
+				where, handle->h_buffer_credits,
+				((ext4_handle_t *)handle)->h_user_credits);
+		err = 0;
+	}
+	ext4_journal_trace(SNAP_WARN, where, handle, -1);
+out:
+	jbd2_journal_release_buffer(handle, bh);
+	return err;
+}
+
+#endif
+
 int __ext4_handle_dirty_metadata(const char *where, unsigned int line,
 				 handle_t *handle, struct inode *inode,
 				 struct buffer_head *bh)

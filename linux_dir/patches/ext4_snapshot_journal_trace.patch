Index: linux_dir/fs/ext4/Kconfig
===================================================================
--- linux_dir.orig/fs/ext4/Kconfig	2010-12-29 22:08:08.000000000 +0530
+++ linux_dir/fs/ext4/Kconfig	2010-12-29 22:08:40.000000000 +0530
@@ -282,6 +282,14 @@
 	  and the current transaction in committed, so the COW cache is
 	  invalidated (as it should be).
 
+config EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+	bool "snapshot journaled - trace COW/buffer credits"
+	depends on EXT4_FS_SNAPSHOT_JOURNAL
+	depends on EXT4_FS_DEBUG
+	default y
+	help
+	  Extra debug prints to trace snapshot usage of buffer credits.
+
 config EXT4_FS_SNAPSHOT_BLOCK_MOVE
 	bool "snapshot block operation - move blocks to snapshot"
 	depends on EXT4_FS_SNAPSHOT_BLOCK
Index: linux_dir/fs/ext4/ext4_jbd2.c
===================================================================
--- linux_dir.orig/fs/ext4/ext4_jbd2.c	2010-12-29 22:08:08.000000000 +0530
+++ linux_dir/fs/ext4/ext4_jbd2.c	2010-12-29 22:11:31.000000000 +0530
@@ -24,6 +24,9 @@
 		if (err)
 			ext4_journal_abort_handle(where, line, __func__, bh,
 						  handle, err);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+		ext4_journal_trace(SNAP_DEBUG, where, handle, 1);
+#endif
 	}
 	return err;
 }
@@ -48,6 +51,9 @@
 		if (err)
 			ext4_journal_abort_handle(where, line, __func__, bh,
 						  handle, err);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+	ext4_journal_trace(SNAP_DEBUG, where, handle, 1);
+#endif
 	}
 	return err;
 }
@@ -99,6 +105,9 @@
 			if (err)
 				ext4_journal_abort_handle(where, line, __func__,
 							  bh, handle, err);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+			ext4_journal_trace(SNAP_DEBUG, where, handle, 1);
+#endif
 			return err;
 		}
 		return 0;
@@ -116,6 +125,9 @@
 			   "error %d when attempting revoke", err);
 	}
 	BUFFER_TRACE(bh, "exit");
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+	ext4_journal_trace(SNAP_DEBUG, where, handle, 1);
+#endif
 	return err;
 }
 
@@ -133,6 +145,9 @@
 		if (err)
 			ext4_journal_abort_handle(where, line, __func__,
 						  bh, handle, err);
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+	ext4_journal_trace(SNAP_DEBUG, where, handle, -1);
+#endif
 	}
 	return err;
 }
@@ -170,6 +186,75 @@
 }
 
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+#ifdef CONFIG_JBD_DEBUG
+static void ext4_journal_cow_stats(int n, ext4_handle_t *handle)
+{
+	if (!trace_cow_enabled())
+		return;
+	snapshot_debug(n, "COW stats: moved/copied=%d/%d, "
+			 "mapped/bitmap/cached=%d/%d/%d, "
+			 "bitmaps/cleared=%d/%d\n", handle->h_cow_moved,
+			 handle->h_cow_copied, handle->h_cow_ok_mapped,
+			 handle->h_cow_ok_bitmap, handle->h_cow_ok_jh,
+			 handle->h_cow_bitmaps, handle->h_cow_excluded);
+}
+#else
+#define ext4_journal_cow_stats(n, handle)
+#endif
+
+#ifdef CONFIG_EXT4_FS_DEBUG
+void __ext4_journal_trace(int n, const char *fn, const char *caller,
+		ext4_handle_t *handle, int nblocks)
+{
+	struct super_block *sb = handle->h_transaction->t_journal->j_private;
+	struct inode *active_snapshot = ext4_snapshot_has_active(sb);
+	int upper = EXT4_SNAPSHOT_START_TRANS_BLOCKS(handle->h_base_credits);
+	int lower = EXT4_SNAPSHOT_TRANS_BLOCKS(handle->h_user_credits);
+	int final = (nblocks == 0 && handle->h_ref == 1 &&
+		     !IS_COWING(handle));
+
+	switch (snapshot_enable_debug) {
+	case SNAP_INFO:
+		/* trace final journal_stop if any credits have been used */
+		if (final && (handle->h_buffer_credits < upper ||
+			      handle->h_user_credits < handle->h_base_credits))
+			break;
+	case SNAP_WARN:
+		/*
+		 * trace if buffer credits are too low - lower limit is only
+		 * valid if there is an active snapshot and not during COW
+		 */
+		if (handle->h_buffer_credits < lower &&
+		    active_snapshot && !IS_COWING(handle))
+			break;
+	case SNAP_ERR:
+		/* trace if user credits are too low */
+		if (handle->h_user_credits < 0)
+			break;
+	case 0:
+		/* no trace */
+		return;
+
+	case SNAP_DEBUG:
+	default:
+		/* trace all calls */
+		break;
+	}
+
+	snapshot_debug_l(n, IS_COWING(handle), "%s(%d): credits=%d,"
+			" limit=%d/%d, user=%d/%d, ref=%d, caller=%s\n",
+			 fn, nblocks, handle->h_buffer_credits, lower, upper,
+			 handle->h_user_credits, handle->h_base_credits,
+			 handle->h_ref, caller);
+	if (!final)
+		return;
+
+	ext4_journal_cow_stats(n, handle);
+}
+#endif
+#endif
+
 
 
 int __ext4_handle_dirty_metadata(const char *where, unsigned int line,
@@ -224,6 +309,9 @@
 			}
 		}
 	}
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+	ext4_journal_trace(SNAP_DEBUG, where, handle, -1);
+#endif
 	return err;
 }
 
Index: linux_dir/fs/ext4/ext4_jbd2.h
===================================================================
--- linux_dir.orig/fs/ext4/ext4_jbd2.h	2010-12-29 22:08:08.000000000 +0530
+++ linux_dir/fs/ext4/ext4_jbd2.h	2010-12-29 22:13:48.000000000 +0530
@@ -205,18 +205,65 @@
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 	struct lockdep_map	h_lockdep_map;
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+
+#ifdef CONFIG_JBD_DEBUG
+	/* Statistics counters: */
+	unsigned int h_cow_moved; /* blocks moved to snapshot */
+	unsigned int h_cow_copied; /* blocks copied to snapshot */
+	unsigned int h_cow_ok_jh; /* blocks already COWed during current
+				     transaction */
+	unsigned int h_cow_ok_bitmap; /* blocks not set in COW bitmap */
+	unsigned int h_cow_ok_mapped;/* blocks already mapped in snapshot */
+	unsigned int h_cow_bitmaps; /* COW bitmaps created */
+	unsigned int h_cow_excluded; /* blocks set in exclude bitmap */
+#endif
+#endif
 };
 
 #ifndef _EXT4_HANDLE_T
 #define _EXT4_HANDLE_T
 typedef struct ext4_handle_s		ext4_handle_t;	/* Ext4 COW handle */
 #endif
 
 #define IS_COWING(handle) \
 	((ext4_handle_t *)(handle))->h_cowing
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+/*
+ * macros for ext4 to update transaction COW statistics.
+ * when ext4 is compiled as a module with CONFIG_JBD_DEBUG, if the symbol
+ * journal_handle_size doesn't exist or doesn't match the sizeof(handle_t),
+ * then the kernel was compiled wthout CONFIG_JBD_DEBUG or without the ext4
+ * patch and the h_cow_* fields are not allocated in handle objects.
+ */
+#ifdef CONFIG_JBD_DEBUG
+extern const u8 journal_handle_size;
+
+#define trace_cow_enabled()	\
+	(journal_handle_size == sizeof(handle_t))
+
+#define trace_cow_add(handle, name, num)			\
+	do {							\
+		if (trace_cow_enabled())			\
+			((ext4_handle_t *)(handle))->h_cow_##name += (num); \
+	} while (0)
+
+#define trace_cow_inc(handle, name)				\
+	do {							\
+		if (trace_cow_enabled())			\
+			((ext4_handle_t *)(handle))->h_cow_##name++;	\
+	} while (0)
+
+#else
+#define trace_cow_enabled()	0
 #define trace_cow_add(handle, name, num)
 #define trace_cow_inc(handle, name)
+#endif
+#else
+#define trace_cow_add(handle, name, num)
+#define trace_cow_inc(handle, name)
+#endif
 
 #endif
 
@@ -299,7 +347,24 @@
 	__ext4_handle_dirty_super(__func__, __LINE__, (handle), (sb))
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_CREDITS
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+#ifdef CONFIG_EXT4_FS_DEBUG
+void __ext4_journal_trace(int debug, const char *fn, const char *caller,
+		ext4_handle_t *handle, int nblocks);
+
+#define ext4_journal_trace(n, caller, handle, nblocks)			\
+	do {								\
+		if ((n) <= snapshot_enable_debug)			\
+			__ext4_journal_trace((n), __func__, (caller),	\
+				(ext4_handle_t *)(handle), (nblocks));	\
+	} while (0)
+
+#else
 #define ext4_journal_trace(n, caller, handle, nblocks)
+#endif
+#else
+#define ext4_journal_trace(n, caller, handle, nblocks)
+#endif
 
 handle_t *__ext4_journal_start(const char *where,
 		struct super_block *sb, int nblocks);
Index: linux_dir/fs/ext4/super.c
===================================================================
--- linux_dir.orig/fs/ext4/super.c	2010-12-29 22:08:08.000000000 +0530
+++ linux_dir/fs/ext4/super.c	2010-12-29 22:08:14.000000000 +0530
@@ -315,6 +315,10 @@
 	int err;
 	int rc;
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_TRACE
+	ext4_journal_trace(SNAP_WARN, where, handle, 0);
+
+#endif
 	if (!ext4_handle_valid(handle)) {
 		ext4_put_nojournal(handle);
 		return 0;

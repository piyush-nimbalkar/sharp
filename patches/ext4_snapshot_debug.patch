Index: backup/fs/ext4/Kconfig
===================================================================
--- backup.orig/fs/ext4/Kconfig	2010-12-02 09:51:38.000000000 +0530
+++ backup/fs/ext4/Kconfig	2010-12-02 11:05:44.000000000 +0530
@@ -75,6 +75,14 @@
 	  If you are not using a security module that requires using
 	  extended attributes for file security labels, say N.
 
+config EXT4_FS_DEBUG
+	bool "snapshot debugging support"
+	depends on EXT4_FS && DEBUG_FS
+	default y
+	help
+	  Control snapshot debug level via debugfs entry /ext4/snapshot-debug.
+	  Control snapshot unit tests via debugfs entries /ext4/test-XXX.
+
 config EXT4_FS_SNAPSHOT
 	bool "snapshot support"
 	depends on EXT4_FS
Index: backup/fs/ext4/Makefile
===================================================================
--- backup.orig/fs/ext4/Makefile	2010-12-02 09:51:38.000000000 +0530
+++ backup/fs/ext4/Makefile	2010-12-02 11:05:44.000000000 +0530
@@ -13,3 +13,4 @@
 ext4-$(CONFIG_EXT4_FS_XATTR)		+= xattr.o xattr_user.o xattr_trusted.o
 ext4-$(CONFIG_EXT4_FS_POSIX_ACL)	+= acl.o
 ext4-$(CONFIG_EXT4_FS_SECURITY)		+= xattr_security.o
+ext4-$(CONFIG_EXT4_FS_DEBUG)	 += snapshot_debug.o
Index: backup/fs/ext4/snapshot_debug.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ backup/fs/ext4/snapshot_debug.c	2010-12-02 11:06:48.000000000 +0530
@@ -0,0 +1,106 @@
+/*
+ * linux/fs/ext4/snapshot_debug.c
+ *
+ * Written by Amir Goldstein <amir73il@users.sf.net>, 2008
+ *
+ * Copyright (C) 2008-2010 CTERA Networks
+ *
+ * This file is part of the Linux kernel and is made available under
+ * the terms of the GNU General Public License, version 2, or at your
+ * option, any later version, incorporated herein by reference.
+ *
+ * Ext4 snapshot debugging.
+ */
+
+
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <linux/debugfs.h>
+#include "snapshot.h"
+
+/*
+ * debugfs tunables
+ */
+
+const char *snapshot_indent = SNAPSHOT_INDENT_STR + SNAPSHOT_INDENT_MAX;
+
+/*
+ * Tunable delay values per snapshot operation for testing of
+ * COW race conditions and master snapshot_mutex lock
+ */
+static const char *snapshot_test_names[SNAPSHOT_TESTS_NUM] = {
+	/* delay completion of snapshot create|take */
+	"test-take-delay-msec",
+	/* delay completion of snapshot shrink|cleanup */
+	"test-delete-delay-msec",
+	/* delay completion of COW operation */
+	"test-cow-delay-msec",
+	/* delay submission of tracked read */
+	"test-read-delay-msec",
+	/* delay completion of COW bitmap operation */
+	"test-bitmap-delay-msec",
+};
+
+#define SNAPSHOT_TEST_NAMES (sizeof(snapshot_test_names) / \
+			     sizeof(snapshot_test_names[0]))
+
+u16 snapshot_enable_test[SNAPSHOT_TESTS_NUM] __read_mostly = {0};
+u8 snapshot_enable_debug __read_mostly = 1;
+
+static struct dentry *ext4_debugfs_dir;
+static struct dentry *snapshot_debug;
+static struct dentry *snapshot_version;
+static struct dentry *snapshot_test[SNAPSHOT_TESTS_NUM];
+
+static char snapshot_version_str[] = EXT4_SNAPSHOT_VERSION;
+static struct debugfs_blob_wrapper snapshot_version_blob = {
+	.data = snapshot_version_str,
+	.size = sizeof(snapshot_version_str)
+};
+
+
+/*
+ * ext4_snapshot_create_debugfs_entry - register ext4 debug hooks
+ * Void function doesn't return error if debug hooks are not registered.
+ */
+void ext4_snapshot_create_debugfs_entry(void)
+{
+	int i;
+
+	ext4_debugfs_dir = debugfs_create_dir("ext4", NULL);
+	if (!ext4_debugfs_dir)
+		return;
+	snapshot_debug = debugfs_create_u8("snapshot-debug", S_IRUGO|S_IWUSR,
+					   ext4_debugfs_dir,
+					   &snapshot_enable_debug);
+	snapshot_version = debugfs_create_blob("snapshot-version", S_IRUGO,
+					       ext4_debugfs_dir,
+					       &snapshot_version_blob);
+	for (i = 0; i < SNAPSHOT_TESTS_NUM && i < SNAPSHOT_TEST_NAMES; i++)
+		snapshot_test[i] = debugfs_create_u16(snapshot_test_names[i],
+					      S_IRUGO|S_IWUSR,
+					      ext4_debugfs_dir,
+					      &snapshot_enable_test[i]);
+}
+
+/*
+ * ext4_snapshot_remove_debugfs_entry - unregister ext4 debug hooks
+ * checks if the hooks have been registered before unregistering them.
+ */
+void ext4_snapshot_remove_debugfs_entry(void)
+{
+	int i;
+
+	if (!ext4_debugfs_dir)
+		return;
+	for (i = 0; i < SNAPSHOT_TESTS_NUM && i < SNAPSHOT_TEST_NAMES; i++)
+		if (snapshot_test[i])
+			debugfs_remove(snapshot_test[i]);
+	if (snapshot_version)
+		debugfs_remove(snapshot_version);
+	if (snapshot_debug)
+		debugfs_remove(snapshot_debug);
+	debugfs_remove(ext4_debugfs_dir);
+}
+
+
Index: backup/fs/ext4/snapshot_debug.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ backup/fs/ext4/snapshot_debug.h	2010-12-02 11:05:44.000000000 +0530
@@ -0,0 +1,105 @@
+/*
+ * linux/fs/ext4/snapshot_debug.h
+ *
+ * Written by Amir Goldstein <amir73il@users.sf.net>, 2008
+ *
+ * Copyright (C) 2008-2010 CTERA Networks
+ *
+ * This file is part of the Linux kernel and is made available under
+ * the terms of the GNU General Public License, version 2, or at your
+ * option, any later version, incorporated herein by reference.
+ *
+ * Ext4 snapshot debugging.
+ */
+
+#ifndef _LINUX_EXT4_SNAPSHOT_DEBUG_H
+#define _LINUX_EXT4_SNAPSHOT_DEBUG_H
+
+#ifdef CONFIG_EXT4_FS_DEBUG
+#include <linux/delay.h>
+
+#define SNAPSHOT_INDENT_MAX 4
+#define SNAPSHOT_INDENT_STR "\t\t\t\t"
+#define KERN_LEVEL_STR "<%d>"
+#define SNAP_KERN_LEVEL(n) ((n)+2) /* 1 = KERN_ERR, ..., 5 = KERN_DEBUG */
+
+#define SNAPTEST_TAKE	0
+#define SNAPTEST_DELETE	1
+#define SNAPTEST_COW	2
+#define SNAPTEST_READ	3
+#define SNAPTEST_BITMAP	4
+#define SNAPSHOT_TESTS_NUM	5
+
+extern const char *snapshot_indent;
+extern u8 snapshot_enable_debug;
+extern u16 snapshot_enable_test[SNAPSHOT_TESTS_NUM];
+extern u8 cow_cache_offset;
+
+#define snapshot_test_delay(i)		     \
+	do {							       \
+		if (snapshot_enable_test[i])			       \
+			msleep_interruptible(snapshot_enable_test[i]); \
+	} while (0)
+
+#define snapshot_test_delay_per_ticks(i, n)	    \
+	do {								\
+		if (snapshot_enable_test[i] && (n))			\
+			msleep_interruptible(				\
+				(snapshot_enable_test[i]/(n))+1);	\
+	} while (0)
+
+#define snapshot_debug_l(n, l, f, a...)					\
+	do {								\
+		if ((n) <= snapshot_enable_debug &&			\
+		    (l) <= SNAPSHOT_INDENT_MAX) {			\
+			printk(KERN_LEVEL_STR "snapshot: %s" f,		\
+				   SNAP_KERN_LEVEL(n),			\
+			       snapshot_indent - (l),			\
+				   ## a);				\
+		}							\
+	} while (0)
+
+#define snapshot_debug(n, f, a...)	snapshot_debug_l(n, 0, f, ## a)
+
+#define SNAPSHOT_DEBUG_ONCE int once = 1
+#define snapshot_debug_once(n, f, a...)					\
+	do {								\
+		if (once) {						\
+			snapshot_debug(n, f, ## a);			\
+			once = 0;					\
+		}							\
+	} while (0)
+
+void ext4_snapshot_create_debugfs_entry(void);
+void ext4_snapshot_remove_debugfs_entry(void);
+
+static inline void init_ext4_snapshot_debug(void)
+{
+	ext4_snapshot_create_debugfs_entry();
+}
+
+static inline void exit_ext4_snapshot_debug(void)
+{
+	ext4_snapshot_remove_debugfs_entry();
+}
+
+#else
+#define snapshot_test_delay(i)
+#define snapshot_test_delay_per_ticks(i, n)
+#define snapshot_debug(n, f, a...)
+#define snapshot_debug_l(n, l, f, a...)
+#define snapshot_debug_once(n, f, a...)
+#define SNAPSHOT_DEBUG_ONCE
+#define init_ext4_snapshot_debug()
+#define exit_ext4_snapshot_debug()
+#endif
+
+
+/* debug levels */
+#define SNAP_ERR	1 /* errors and summary */
+#define SNAP_WARN	2 /* warnings */
+#define SNAP_INFO	3 /* info */
+#define SNAP_DEBUG	4 /* debug */
+#define SNAP_DUMP	5 /* dump snapshot file */
+
+#endif	/* _LINUX_EXT4_SNAPSHOT_DEBUG_H */
Index: backup/fs/ext4/snapshot.h
===================================================================
--- backup.orig/fs/ext4/snapshot.h	2010-12-02 11:05:10.000000000 +0530
+++ backup/fs/ext4/snapshot.h	2010-12-02 11:05:44.000000000 +0530
@@ -18,6 +18,7 @@
 #include <linux/version.h>
 #include <linux/delay.h>
 #include "ext4_jbd2.h"
+#include "snapshot_debug.h"
 
 
 #define EXT4_SNAPSHOT_VERSION "ext4 snapshot v1.0.13-rc3 (1-Nov-2010)"
@@ -118,11 +119,13 @@
 
 static inline int init_ext4_snapshot(void)
 {
+	init_ext4_snapshot_debug();
 	return 0;
 }
 
 static inline void exit_ext4_snapshot(void)
 {
+	exit_ext4_snapshot_debug();
 }
 
 
Index: backup/fs/ext4/ext4_jbd2.h
===================================================================
--- backup.orig/fs/ext4/ext4_jbd2.h	2010-12-02 09:51:38.000000000 +0530
+++ backup/fs/ext4/ext4_jbd2.h	2010-12-02 11:05:44.000000000 +0530
@@ -21,6 +21,7 @@
 #include <linux/fs.h>
 #include <linux/jbd2.h>
 #include "ext4.h"
+#include "snapshot_debug.h"
 
 #define EXT4_JOURNAL(inode)	(EXT4_SB((inode)->i_sb)->s_journal)
 

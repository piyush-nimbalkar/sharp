===next3_snapshot_file_perm.patch===

next3: snapshot file - permissions

Enforce snapshot file permissions.
Write, truncate and unlink of snapshot inodes is not allowed.

Signed-off-by: Amir Goldstein <amir73il@users.sf.net>

--------------------------------------------------------------------------------
diff -Nuarp a/fs/next3/file.c b/fs/next3/file.c
--- a/fs/next3/file.c	2010-07-26 09:22:06.074977835 +0300
+++ b/fs/next3/file.c	2010-07-26 09:22:05.584968383 +0300
@@ -29,6 +29,18 @@
 #include "acl.h"
 #include "snapshot.h"
 
+static int next3_file_open(struct inode *inode, struct file *filp)
+{
+	if (next3_snapshot_file(inode) &&
+		(filp->f_flags & O_ACCMODE) != O_RDONLY)
+		/*
+		 * allow only read-only access to snapshot files
+		 */
+		return -EPERM;
+
+	return generic_file_open(inode, filp);
+}
+
 /*
  * Called when an inode is released. Note that this is different
  * from next3_file_open: open gets called at every open, but release
@@ -124,7 +136,7 @@ const struct file_operations next3_file_
 	.compat_ioctl	= next3_compat_ioctl,
 #endif
 	.mmap		= generic_file_mmap,
-	.open		= generic_file_open,
+	.open		= next3_file_open,
 	.release	= next3_release_file,
 	.fsync		= next3_sync_file,
 	.splice_read	= generic_file_splice_read,
diff -Nuarp a/fs/next3/inode.c b/fs/next3/inode.c
--- a/fs/next3/inode.c	2010-07-26 09:22:06.094977501 +0300
+++ b/fs/next3/inode.c	2010-07-26 09:22:05.594970214 +0300
@@ -2564,6 +2564,13 @@ void next3_truncate(struct inode *inode)
 	unsigned blocksize = inode->i_sb->s_blocksize;
 	struct page *page;
 
+	/* prevent truncate of files on snapshot list */
+	if (next3_snapshot_list(inode)) {
+		snapshot_debug(1, "snapshot (%u) cannot be truncated!\n",
+				inode->i_generation);
+		return;
+	}
+
 	if (!next3_can_truncate(inode))
 		goto out_notrans;
 
diff -Nuarp a/fs/next3/namei.c b/fs/next3/namei.c
--- a/fs/next3/namei.c	2010-07-26 09:22:06.115041714 +0300
+++ b/fs/next3/namei.c	2010-07-26 09:22:05.614969034 +0300
@@ -2146,6 +2146,14 @@ static int next3_unlink(struct inode * d
 			      inode->i_ino, inode->i_nlink);
 		inode->i_nlink = 1;
 	}
+	/* prevent unlink of files on snapshot list */
+	if (inode->i_nlink == 1 &&
+		next3_snapshot_list(inode)) {
+		snapshot_debug(1, "snapshot (%u) cannot be unlinked!\n",
+				inode->i_generation);
+		retval = -EPERM;
+		goto end_unlink;
+	}
 	retval = next3_delete_entry(handle, dir, de, bh);
 	if (retval)
 		goto end_unlink;
